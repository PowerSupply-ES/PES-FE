{"version":3,"file":"src_pages_manage_ProbDetailPage_tsx.765c8228149cc11e3a92.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAC0B;AAC8B;;AAExD;AAAA;AAiBA,MAAMM,cAAc,GAAGA,CAAA,KAAM;EAC3B,IAAIC,GAAG,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;EACvC,IAAIC,SAAS,GAAGC,MAAM,CAACN,GAAG,CAACO,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEpD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,+CAAQ,CAAwB,IAAI,CAAC;EAEnE,MAAMe,cAAc,GAAG,MAAON,SAAiB,IAAK;IAClD,IAAI;MACF,MAAM;QAAEO;MAAK,CAAC,GAAG,MAAMnB,gDAAS,CAAC,sBAAsBY,SAAS,EAAE,EAAE;QAClES,eAAe,EAAE;MACnB,CAAC,CAAC;MACF,OAAOF,IAAI;IACb,CAAC,CAAC,OAAOG,KAAc,EAAE;MACvBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMG,YAAY,GAAGxB,kDAAW,CAAC,YAAY;IAC3C,IAAI;MACF,MAAMyB,QAAQ,GAAG,MAAMR,cAAc,CAACN,SAAS,CAAC;MAChDK,UAAU,CAACS,QAAQ,CAAC;IACtB,CAAC,CAAC,OAAOJ,KAAc,EAAE;MACvBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,CAACV,SAAS,CAAC,CAAC;EAEfV,gDAAS,CAAC,MAAM;IACduB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBF,OAAO,CAACC,GAAG,CAAC,SAAS,EAACR,OAAO,CAAC;EAE9B,oBACEX,sDAAA;IAAAsB,QAAA,EAAK;EAEL,CAAK,CAAC;AAEV,CAAC;AAED,iEAAerB,cAAc","sources":["webpack://pes-fe/./src/pages/manage/ProbDetailPage.tsx"],"sourcesContent":["// 관리자_문제 관리 페이지\r\nimport axios from \"axios\";\r\nimport { useCallback, useEffect, useState } from \"react\"\r\n\r\n// ProblemContent 타입\r\nexport type ProblemContent = {\r\n  problemId: number;\r\n  problemTitle: string;\r\n  problemScore: number;\r\n  context: string;\r\n  sample:number;\r\n  inputs:string;\r\n  outputs:string;\r\n\r\n  // renderStyledNewlines함수사용 위해 배열로 변환\r\n  //sampleInputs: string[];\r\n  //sampleOutputs: string[];\r\n};\r\n\r\n\r\n\r\nconst ProbDetailPage = () => {\r\n  let url = new URL(window.location.href);\r\n  let problemId = Number(url.pathname.split(\"/\")[2]); // 문자열을 숫자로 변환\r\n\r\n  const [problem, setProblem] = useState<ProblemContent | null>(null);\r\n  \r\n  const getProbContent = async (problemId: number) => {\r\n    try {\r\n      const { data } = await axios.get(`/api/admin/problem/${problemId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return data;\r\n    } catch (error: unknown) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  const fetchProblem = useCallback(async () => {\r\n    try {\r\n      const response = await getProbContent(problemId);\r\n      setProblem(response);\r\n    } catch (error: unknown) {\r\n      console.error(error);\r\n    }\r\n  }, [problemId]);\r\n  \r\n  useEffect(() => {\r\n    fetchProblem();\r\n  }, [fetchProblem]);\r\n  \r\n  console.log(\"problem\",problem);\r\n\r\n  return (\r\n    <div>\r\n      ProbDetail페이지\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProbDetailPage\r\n"],"names":["axios","useCallback","useEffect","useState","jsx","_jsx","ProbDetailPage","url","URL","window","location","href","problemId","Number","pathname","split","problem","setProblem","getProbContent","data","get","withCredentials","error","console","log","fetchProblem","response","children"],"sourceRoot":""}