{"version":3,"file":"src_pages_notice_noticePage_tsx.680656d0ca39e096bbb1.js","mappings":"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","sources":["webpack://pes-fe/./src/apis/notice/getNoticeList.ts","webpack://pes-fe/./src/components/common/Common.tsx","webpack://pes-fe/./src/components/notice/NoticeList.tsx","webpack://pes-fe/./src/pages/notice/noticePage.tsx","webpack://pes-fe/./src/styles/css/notice.css?c227"],"sourcesContent":["import axios from \"axios\";\r\nimport { SetNoticeList } from \"model/noticeType\";\r\n\r\n// 공지사항 리스트 get API 요청\r\nconst getNoticeList = async (setNoticeList: SetNoticeList): Promise<void> => {\r\n  const uri = \"api/notice\";\r\n\r\n  try {\r\n    const response = await axios.get(uri);\r\n\r\n    if (response.status === 204) {\r\n      console.log(\"공지사항이 아직 없습니다!\");\r\n      setNoticeList([]); // 빈 배열로 설정\r\n      return;\r\n    }\r\n    setNoticeList(response.data);\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {  //axios error인지 확인\r\n      // 서버가 응답을 반환했지만 상태 코드가 오류를 나타내는 경우\r\n      console.error(\r\n        \"Axios 오류 발생:\",\r\n        error.response?.status,\r\n        error.response?.statusText\r\n      );\r\n    } else if (error instanceof Error) {  //js오류인지 확인\r\n      // 요청이 서버로 전송되었지만 응답을 받지 못한 경우\r\n      console.error(\"일반 오류 발생:\", error.message);\r\n    } else {\r\n      console.error(\"알 수 없는 오류 발생:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default getNoticeList;\r\n","import React from \"react\";\r\n// ===== 공용 함수 지정 =====\r\n\r\n// --- Time에서 \"T\" 제거하여 표시하는 함수\r\nexport const transferTime = (time: string | null | undefined) => {\r\n  if (!time) return \"\"; // 시간이 없는 경우 처리\r\n\r\n  return time.replace(\"T\", \" \");\r\n};\r\n\r\n// --- 뒤로가기 함수\r\nexport const goBack = () => {\r\n  window.history.back();\r\n};\r\n\r\n// --- '\\n' 기준으로 줄바꿈하는 함수\r\n// React.ReactNode : JSX반환타입\r\nexport const renderNewlines = (text: string): React.ReactNode => {\r\n  return text.split(\"\\n\").map((line, index) => (\r\n    <React.Fragment key={index}>\r\n      {line}\r\n      <br />\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// --- '\\n\\n' 기준으로 줄바꿈하는 함수\r\nexport const renderStyledNewlines = (text: string): React.ReactNode => {\r\n  const lines = text.split(\"\\n\\n\"); // 각 줄을 분할\r\n  return lines.map((line, index) => {\r\n    return (\r\n      <span key={index}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    );\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { transferTime } from \"components/common/Common\";\r\nimport { NoticeListProps } from \"model/noticeType\";\r\n\r\n// 공지사항 컴포넌트\r\nconst NoticeList: React.FC<NoticeListProps> = ({ noticeList, navigate }) => {\r\n  // 해당 공지사항으로 이동 함수\r\n  const gotoNotice = (noticeId: number) => {\r\n    console.log(\"noticeId: \", noticeId);\r\n    navigate(`/notice/${noticeId}`);\r\n  };\r\n\r\n  // TODO : 함수 말고 API로 대체하기\r\n  const isNewNotice = (createdTime: string): boolean => {\r\n    const currentTime = new Date(); //현재시간\r\n    const noticeTime = new Date(createdTime); //공지사항 생성시간\r\n    const difference = currentTime.getTime() - noticeTime.getTime(); //시간 차\r\n\r\n    // 생성시간이 하루 이내인지 확인\r\n    const oneDay = 24 * 60 * 60 * 1000; //하루의 밀리초\r\n    return Math.floor(difference / oneDay) <= 1;\r\n  };\r\n\r\n  return (\r\n    <div className=\"info_list\">\r\n      {noticeList.map((it, index) => (\r\n        <div className=\"info\" key={it.noticeId}>\r\n          <div className=\"title_0\">\r\n            {/* TODO : 중요, new 버튼 둘 중 하나 선택*/}\r\n            {it.isImportant ? (\r\n              <div className=\"imp\">중요</div>\r\n            ) : isNewNotice(it.createdTime) ? (\r\n              <div className=\"new\">new</div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          {/* 공지사항id */}\r\n          <div className=\"title_1\">{it.noticeId}</div>\r\n\r\n          {/* 제목 */}\r\n          <div className=\"title_2\" onClick={() => gotoNotice(it.noticeId)}>\r\n            {it.title}\r\n          </div>\r\n\r\n          {/* 작성날짜 */}\r\n          <div className=\"title_3\">{transferTime(it.createdTime)}</div>\r\n\r\n          {/* 조회수 */}\r\n          <div className=\"title_4\">{it.noticeHit}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoticeList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"styles/css/notice.css\";\r\nimport { HiSpeakerphone } from \"react-icons/hi\";\r\nimport { PiNotePencilFill } from \"react-icons/pi\";\r\nimport getNoticeList from \"apis/notice/getNoticeList\";\r\nimport NoticeList from \"components/notice/NoticeList\";\r\nimport { NoticeListType } from \"model/noticeType\"; \r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"stores/store\"; // RootState 임포트\r\n\r\nconst NoticePage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { memberStatus } = useSelector((state: RootState) => state.user); // redux에서 가져오기\r\n\r\n  // 공지사항 리스트\r\n  const [noticeList, setNoticeList] = useState<NoticeListType[]>([]);\r\n\r\n  useEffect(() => {\r\n    getNoticeList(setNoticeList); // 리스트 가져오기\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"info_body\">\r\n      <div className=\"content_info\">\r\n        <div className=\"header\">\r\n          <HiSpeakerphone size={30} />\r\n          <p>공지사항</p>\r\n        </div>\r\n\r\n        {/* TODO : 관리자에만 띄우기 */}\r\n        <div\r\n          className={memberStatus === \"관리자\" ? \"add_info\" : \"no_button\"}\r\n          // TODO : 등록하기 uri수정하기\r\n          onClick={() => navigate(\"/postNotice\")}\r\n        >\r\n          <PiNotePencilFill size={25} />\r\n          <p>등록하기</p>\r\n        </div>\r\n\r\n        {/* 제목 컴포넌트 */}\r\n        <div className=\"info_title\">\r\n          <div className=\"title_0\"> </div>\r\n          <div className=\"title_1\">번호</div>\r\n          <div className=\"title_2\">제목</div>\r\n          <div className=\"title_3\">작성 날짜</div>\r\n          <div className=\"title_4\">조회 수</div>\r\n        </div>\r\n\r\n        {/* 공지사항리스트 컴포넌트 */}\r\n        <NoticeList noticeList={noticeList} navigate={navigate}></NoticeList>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default NoticePage;\r\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":["axios","getNoticeList","setNoticeList","uri","response","get","status","console","log","data","error","isAxiosError","statusText","Error","message","React","jsx","_jsx","jsxs","_jsxs","transferTime","time","replace","goBack","window","history","back","renderNewlines","text","split","map","line","index","Fragment","children","renderStyledNewlines","lines","NoticeList","_ref","noticeList","navigate","gotoNotice","noticeId","isNewNotice","createdTime","currentTime","Date","noticeTime","difference","getTime","oneDay","Math","floor","className","it","isImportant","onClick","title","noticeHit","useEffect","useState","useNavigate","HiSpeakerphone","PiNotePencilFill","useSelector","NoticePage","memberStatus","state","user","size"],"sourceRoot":""}