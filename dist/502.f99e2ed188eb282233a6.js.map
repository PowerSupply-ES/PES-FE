{"version":3,"file":"502.f99e2ed188eb282233a6.js","mappings":"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","sources":["webpack://pes-fe/./src/apis/problem/getProbTitle.ts","webpack://pes-fe/./src/components/solution/SolvingList.tsx","webpack://pes-fe/./src/apis/solution/getSoluList.ts","webpack://pes-fe/./src/hooks/solution/useSoluList.ts","webpack://pes-fe/./src/pages/solution/solutionPage.tsx","webpack://pes-fe/./src/hooks/solution/useSoluProb.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// 문제 제목 get 요청\r\nconst getProbTitle = async (problemId: number) => {\r\n  try {\r\n    const res = await axios.get(`/api2/problemtitle/${problemId}`, {\r\n      withCredentials: true,\r\n    });\r\n    return res.data;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n  }\r\n  console.log(\"problemId:\", problemId);\r\n};\r\n\r\nexport default getProbTitle;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SolvingListProps } from \"model/userType\";\r\n\r\n\r\n// 풀이list 컴포넌트\r\nconst SolvingList: React.FC<SolvingListProps> = ({ solveData }) => {\r\n  const navigate = useNavigate();\r\n\r\n  // 해당 풀이로 이동\r\n  const gotoProblem = (answerId : number) => {\r\n    console.log(\"answerId: \", answerId);\r\n    navigate(`/question/${answerId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"solving_list\">\r\n      {solveData.map(\r\n        (it) =>\r\n          // answerState가 \"question\"과 일치하지 않을 때에만 렌더링( 수정: answerId -> answerState )\r\n          it.answerState !== \"question\" && (\r\n            <div className=\"solving\" key={it.answerId}>\r\n              {/* 풀이컴포넌트 좌측 요소 */}\r\n              <div className=\"left\">\r\n                <div className=\"userGen\">\r\n                  <p>{it.memberGen}</p>\r\n                  <p>기 </p>\r\n                </div>\r\n                <div className=\"userName\">{it.memberName}</div>\r\n              </div>\r\n\r\n              {/* 풀이컴포넌트 우측 요소 */}\r\n              <div className=\"right\">\r\n                <div className=\"process_num\">{it.commentCount}/2</div>\r\n                <div\r\n                  className={`${\r\n                    it.answerState === \"success\"\r\n                      ? \"btn_success\"\r\n                      : it.answerState === \"fail\"\r\n                      ? \"btn_fail\"\r\n                      : \"btn_state\"\r\n                  }`}\r\n                >\r\n                  {it.answerState}\r\n                </div>\r\n\r\n                <button\r\n                  className=\"btn_goto_challenge\"\r\n                  onClick={() => gotoProblem(it.answerId)}\r\n                >\r\n                  풀이보기\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolvingList;\r\n","import axios from \"axios\";\r\nimport { SolutionList } from \"model/userType\";\r\n\r\n// 풀이 get API\r\nconst getSoluList = async (problemId: number): Promise<SolutionList[]> => {\r\n  const uri = \"/api/answerlist/\";\r\n\r\n  try {\r\n    const response = await axios.get<SolutionList[]>(`${uri}${problemId}`);\r\n    return response.data;\r\n  } catch (error: unknown) {\r\n    console.error(\"데이터 가져오기 실패:\", error);\r\n    return []; // 오류 발생 시 빈 배열 반환\r\n  }\r\n};\r\n\r\nexport default getSoluList;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { SolutionList } from \"model/userType\";\r\nimport getSoluList from \"apis/solution/getSoluList\";\r\n\r\n// 풀이 get HOOk\r\nconst useSoluList = (problemId: number): SolutionList[] => {\r\n  const [solveData, setSolveData] = useState<SolutionList[]>([]);\r\n\r\n  // 풀이 get API\r\n  const sendGetSolve = useCallback(async () => {\r\n    try {\r\n      const res = await getSoluList(problemId);\r\n      setSolveData(res);\r\n    } catch (error: unknown) {\r\n      console.error(\"데이터 가져오기 실패:\", error);\r\n    }\r\n  }, [problemId]);\r\n\r\n  useEffect(() => {\r\n    sendGetSolve();\r\n  }, [sendGetSolve]);\r\n\r\n  return solveData;\r\n};\r\n\r\nexport default useSoluList;\r\n","import \"styles/css/solution.css\";\r\nimport SolvingList from \"components/solution/SolvingList\";\r\nimport {useSoluProb, useSoluList} from \"hooks/solution\";\r\nimport Loading from \"components/common/Loading\";\r\n\r\nconst SolutionPage = () => {\r\n  // TODO : split한 problemId와 solveData.problemId 구분하기\r\n  let url = new URL(window.location.href);\r\n  let problemId = (url.pathname.split(\"/\")[2]);\r\n  sessionStorage.setItem(\"problemId\", problemId);\r\n\r\n  // 인수 전달을 위한 problem 타입 가공\r\n  const problemIdParsed = Number(problemId);\r\n  // 문제 get API HOOk\r\n  const problemData = useSoluProb(problemIdParsed);\r\n  // 풀이 get API HOOk\r\n  const solveData = useSoluList(problemIdParsed);\r\n\r\n  // 조건부 렌더링\r\n  if (!problemData || !solveData.length) {\r\n    return <Loading/>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"solution_container\">\r\n      <div className=\"solution_bar\">\r\n        <div className=\"solution\">\r\n          <div className=\"left\">\r\n            <div className=\"solution_num\">{problemData.problemId}</div>\r\n            <div className=\"solution_title\">{problemData.problemTitle}</div>\r\n          </div>\r\n\r\n          <div className=\"prob_score\">\r\n            <p>{problemData.problemScore}</p>\r\n            <p>점</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"pass_num\"></div>\r\n\r\n      {/* 풀이 list */}\r\n      <SolvingList solveData={solveData}></SolvingList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SolutionPage;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport getProbTitle from \"apis/problem/getProbTitle\";\r\nimport { SoluProb } from \"model/problemType\";\r\n// 문제제목 get HOOk\r\nconst useSoluProb = (problemId: number): SoluProb | undefined => {\r\n  const [problemData, setProblemData] = useState<SoluProb | undefined>(\r\n    undefined\r\n  );\r\n\r\n  // 문제제목 get API\r\n  const sendGetProblem = useCallback(async () => {\r\n    try {\r\n      const res = await getProbTitle(problemId);\r\n      setProblemData(res);\r\n    } catch (error) {\r\n      // TODO : 예외처리 자세히\r\n      console.error(\"데이터 가져오기 실패:\", error);\r\n    }\r\n  }, [problemId]);\r\n\r\n  useEffect(() => {\r\n    sendGetProblem();\r\n  }, [sendGetProblem]);\r\n\r\n  return problemData;\r\n};\r\n\r\nexport default useSoluProb;\r\n"],"names":["async","axios","problemId","withCredentials","data","error","console","log","_ref","solveData","navigate","useNavigate","_jsx","className","children","map","it","answerState","_jsxs","memberGen","memberName","commentCount","onClick","gotoProblem","answerId","setSolveData","useState","sendGetSolve","useCallback","res","getSoluList","useEffect","SolutionPage","URL","window","location","href","pathname","split","sessionStorage","setItem","problemIdParsed","Number","problemData","setProblemData","undefined","sendGetProblem","getProbTitle","useSoluProb","useSoluList","length","problemTitle","problemScore","SolvingList","Loading"],"sourceRoot":""}