{"version":3,"file":"838.1cabec6e85ef37e621d7.js","mappings":"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","sources":["webpack://pes-fe/./src/apis/problem/getProbTitle.ts","webpack://pes-fe/./src/components/common/Common.tsx","webpack://pes-fe/./src/apis/problem/getProbContent.ts","webpack://pes-fe/./src/hooks/problem/useProbContent.ts","webpack://pes-fe/./src/apis/problem/postSubmitCode.ts","webpack://pes-fe/./src/hooks/problem/useSubmitCode.ts","webpack://pes-fe/./src/hooks/problem/useProbPage.ts","webpack://pes-fe/./src/hooks/problem/useProbTitle.ts","webpack://pes-fe/./src/apis/question/getCode.ts","webpack://pes-fe/./src/hooks/question/useQuestionHook.ts","webpack://pes-fe/./src/apis/question/getQues.ts","webpack://pes-fe/./src/apis/question/getFeed.ts","webpack://pes-fe/./src/apis/question/postAnswers.ts","webpack://pes-fe/./src/apis/question/postFeed.ts","webpack://pes-fe/./src/components/question/ProbCode.tsx","webpack://pes-fe/./src/components/question/ProbHeader.tsx","webpack://pes-fe/./src/components/question/RenderFeed.tsx","webpack://pes-fe/./src/components/question/RenderAnswerUI.tsx","webpack://pes-fe/./src/pages/question/questionPage.tsx","webpack://pes-fe/./src/styles/styledComponent/Problem-styled.tsx","webpack://pes-fe/./src/styles/styledComponent/Question-styled.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// 문제 제목 get 요청\r\nconst getProbTitle = async (problemId: number) => {\r\n  try {\r\n    const res = await axios.get(`/api2/problemtitle/${problemId}`, {\r\n      withCredentials: true,\r\n    });\r\n    return res.data;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n  }\r\n  console.log(\"problemId:\", problemId);\r\n};\r\n\r\nexport default getProbTitle;\r\n","import React from \"react\";\r\n// ===== 공용 함수 지정 =====\r\n\r\n// --- Time에서 \"T\" 제거하여 표시하는 함수\r\nexport const transferTime = (time: string | null | undefined) => {\r\n  if (!time) return \"\"; // 시간이 없는 경우 처리\r\n\r\n  return time.replace(\"T\", \" \");\r\n};\r\n\r\n// --- 뒤로가기 함수\r\nexport const goBack = () => {\r\n  window.history.back();\r\n};\r\n\r\n// --- '\\n' 기준으로 줄바꿈하는 함수\r\n// React.ReactNode : JSX반환타입\r\nexport const renderNewlines = (text: string): React.ReactNode => {\r\n  return text.split(\"\\n\").map((line, index) => (\r\n    <React.Fragment key={index}>\r\n      {line}\r\n      <br />\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// --- '\\n\\n' 기준으로 줄바꿈하는 함수\r\nexport const renderStyledNewlines = (text: string): React.ReactNode => {\r\n  const lines = text.split(\"\\n\\n\"); // 각 줄을 분할\r\n  return lines.map((line, index) => {\r\n    return (\r\n      <span key={index}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    );\r\n  });\r\n};\r\n","import axios from \"axios\";\r\n\r\n// 문제 내용 get 요청\r\nconst getProbContent = async (problemId: number) => {\r\n  try {\r\n    const { data } = await axios.get(`/api2/problem/${problemId}`, {\r\n      withCredentials: true,\r\n    });\r\n    return data;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default getProbContent;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport getProbContent from \"apis/problem/getProbContent\";\r\nimport { ProblemContent } from \"model/problemType\";\r\n\r\n// 문제 내용 get HOOK\r\nconst useProbContent = (problemId: number): ProblemContent | null => {\r\n  const [problem, setProblem] = useState<ProblemContent | null>(null);\r\n\r\n  const fetchProblem = useCallback(async () => {\r\n    try {\r\n      const response = await getProbContent(problemId);\r\n      setProblem(response);\r\n    } catch (error: unknown) {\r\n      console.error(error);\r\n    }\r\n  }, [problemId]);\r\n\r\n  useEffect(() => {\r\n    fetchProblem();\r\n  }, [fetchProblem]);\r\n\r\n  return problem;\r\n};\r\n\r\nexport default useProbContent;\r\n","import axios from \"axios\";\r\n\r\n// 코드 제출 post 요청\r\nconst postSubmitCode = async (request: string, problemId: number) => {\r\n  try {\r\n    const response = await axios.post(`/api2/submit/${problemId}`, {\r\n      code: request,\r\n      problemId: problemId,\r\n    });\r\n    return { data: response.data, status: response.status };\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n\r\n    // error가 AxiosError인지 확인\r\n    if (axios.isAxiosError(error)) {\r\n      return { status: error.response ? error.response.status : 500 };\r\n    } else {\r\n      // 예상하지 못한 다른 에러의 경우\r\n      return { status: 500 };\r\n    }\r\n  }\r\n};\r\n\r\nexport default postSubmitCode;\r\n","import { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport postSubmitCode from \"apis/problem/postSubmitCode\";\r\n\r\n// 문제 post 요청\r\nconst useSubmitCode = (problemId: number) => {\r\n  const navigate = useNavigate();\r\n  const text = useRef<string>(\"\"); // 코드 입력을 위한 useRef\r\n  const [detail, setDetail] = useState<string | null>(null); // 틀린 이유 저장하는 state\r\n\r\n  // 수정코드_by성임\r\n  function textHandler(newCode: string) {\r\n    text.current = newCode;\r\n  }\r\n\r\n  const submitCode = async () => {\r\n    if (!text.current) {\r\n      alert(\"코드를 입력해주세요!\");\r\n    } else {\r\n      const { data: response, status } = await postSubmitCode(\r\n        text.current,\r\n        problemId\r\n      );\r\n\r\n      if (!response) {\r\n        alert(\"오류!\");\r\n      } else if (status === 201) {\r\n        console.log(response);\r\n        alert(\"문제를 맞혔습니다! 질의응답 페이지로 이동합니다.\");\r\n        sessionStorage.setItem(\"problemId\", problemId.toString());\r\n        navigate(`/question/${response.answer_id}`);\r\n      } else if (status === 202) {\r\n        setDetail(response.detail);\r\n        alert(\"문제를 틀렸습니다! 다시 풀어보세요.\");\r\n      } else if (status === 500) {\r\n        alert(\r\n          `server가 응답하지 않네요! 관리자에게 상황을 공유해주세요! : ${response.message}`\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return { detail, textHandler, submitCode };\r\n};\r\n\r\nexport default useSubmitCode;\r\n","// 문제 관련 HOOK 반환타입\r\nimport {useProbContent, useProbTitle, useSubmitCode} from \"./index\";\r\nimport { UseProbPageReturnType } from \"model/problemType\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"stores/store\";\r\n\r\n// 문제 관련 HOOK 관리 - ProblemPage에 사용\r\nconst useProbPage = (problemId: number): UseProbPageReturnType => {\r\n  const title = useProbTitle(problemId); // 문제 제목 get HOOK\r\n  const problem = useProbContent(problemId); // 문제 내용 get HOOK\r\n  const { textHandler, submitCode, detail } = useSubmitCode(problemId); // 문제 post 요청\r\n  const { status } = useSelector((state: RootState) => state.sign); // redux에서 가져오기\r\n\r\n  const isLogin = status;\r\n\r\n  return {\r\n    title,\r\n    problem,\r\n    detail,\r\n    isLogin,\r\n    textHandler,\r\n    submitCode\r\n  };\r\n};\r\n\r\nexport default useProbPage;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport getProbTitle from \"apis/problem/getProbTitle\";\r\nimport { ProblemTitle } from \"model/problemType\";\r\n\r\n// 문제 제목 get HOOK\r\nconst useProbTitle = (problemId: number): ProblemTitle | null => {\r\n  const [title, setTitle] = useState<ProblemTitle | null>(null);\r\n\r\n  // problemId가 변경되지 않는 한, 동일한 함수로 재사용\r\n  const fetchTitle = useCallback(async () => {\r\n    try {\r\n      const titleData = await getProbTitle(problemId);\r\n      if (titleData) {\r\n        setTitle(titleData); // titleData가 존재할 때만 state 업데이트\r\n      } else {\r\n        setTitle(null);\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error(error);\r\n      setTitle(null);\r\n    }\r\n  }, [problemId]);\r\n\r\n  useEffect(() => {\r\n    fetchTitle();\r\n  }, [fetchTitle]);\r\n\r\n  return title;\r\n};\r\n\r\nexport default useProbTitle;\r\n","import axios from \"axios\";\r\n\r\n// 사용자가 작성한 코드 불러오기 (get)\r\nconst getCode = async (answerId: number): Promise<string> => {\r\n  try {\r\n    const { data: response } = await axios.get(`/api2/question/${answerId}`, {\r\n      withCredentials: true,\r\n    });\r\n    return response.code;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default getCode;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport {getFeed, getCode, getQues, postAnswers, postFeed} from \"apis/question\";\r\nimport { CommentListType, QuesAnswerType, UseQuestionHookResult } from \"model/questionType\";\r\n\r\n// 질문테스트(question) 관련 HOOK들 관리\r\nconst useQuestionHook = (\r\n  answerId: number,\r\n  getAlert: (responseStatus: number) => void,\r\n  problemId: number\r\n): UseQuestionHookResult => {\r\n  const [state, setState] = useState<string>(\"\");\r\n  const [code, setCode] = useState<string>(\"\");\r\n  const [qnA, setQnA] = useState<QuesAnswerType | null>(null);\r\n  const [feedbacks, setFeedbacks] = useState<CommentListType[]>([]);\r\n  const [passCount, setPassCount] = useState<number>(0);\r\n\r\n  // 사용자 코드 get HOOK\r\n  const getCodes = useCallback(async () => {\r\n    try {\r\n      const code = await getCode(answerId); // get API 호출\r\n      if(code !== null && code !== undefined){\r\n        setCode(code);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [answerId]);\r\n\r\n  // 질문, 답변 get HOOK\r\n  const getQuestions = useCallback(async () => {\r\n    try {\r\n      const response = await getQues(answerId);\r\n      setQnA(response);\r\n      setState(response.answerState || \"\"); // 기본값으로 빈 문자열 설정\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [answerId]);\r\n\r\n  // 답변 post HOOK\r\n  const postAnswer = async (answerFst: string, answerSec: string) => {\r\n    try {\r\n      await postAnswers(answerId, answerFst, answerSec);\r\n      alert(\"성공적으로 답변을 등록했습니다.\");\r\n      window.location.reload();\r\n    } catch (error: unknown) {\r\n      // error가 AxiosError인지 확인\r\n      if (axios.isAxiosError(error)) {\r\n        const status = error.response ? error.response.status : null;\r\n\r\n        if (status === 400) {\r\n          alert(\"이미 답변이 등록되어 있습니다.\");\r\n        } else if (status === 403) {\r\n          alert(\"접근할 수 있는 사용자가 아닙니다.\");\r\n        } else {\r\n          console.log(\"알 수 없는 서버 오류가 발생했습니다.\", error);\r\n        }\r\n      } else {\r\n        // AxiosError가 아닌 다른 오류 처리\r\n        console.log(\"예상하지 못한 오류가 발생했습니다.\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 댓글 get HOOK\r\n  const getFeedback = useCallback(async () => {\r\n    try {\r\n      const response = await getFeed(answerId); // get API 호출\r\n      let passCount = 0;\r\n      setFeedbacks(response);\r\n      for (let i = 0; i < response.length; i++) {\r\n        if (response[i].commentPassFail === 1) {\r\n          passCount++;\r\n        }\r\n      }\r\n      setPassCount(passCount);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [answerId]);\r\n\r\n  // 댓글 post HOOK\r\n  const postFeedback = async (comment: string, selected: number) => {\r\n    try {\r\n      const response = await postFeed(answerId, comment, selected);\r\n      getFeedback();\r\n      getAlert(response.status);\r\n      window.location.reload();\r\n    } catch (error: unknown) {\r\n      if (axios.isAxiosError(error)) {\r\n        // AxiosError 타입 확인 후 처리\r\n        const status = error.response?.status;\r\n        if (status === 403) {\r\n          // 403에러 예외처리 추가 by.성임\r\n          alert(\"권한이 없습니다!\");\r\n        } else if (status === 400) {\r\n          alert(\"이미 댓글을 달았어요!\");\r\n        } else {\r\n          console.log(\"알 수 없는 오류가 발생했습니다.\", error);\r\n        }\r\n      } else {\r\n        console.log(\"예상하지 못한 오류가 발생했습니다.\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCodes();\r\n    getQuestions();\r\n  }, [getCodes, getQuestions]);\r\n\r\n  // 피드백 가져오기 HOOK\r\n  useEffect(() => {\r\n    if (state === \"comment\" || state === \"success\" || state === \"fail\") {\r\n      getFeedback();\r\n    }\r\n  }, [state, getFeedback]);\r\n\r\n  return {\r\n    code,\r\n    qnA,\r\n    state,\r\n    feedbacks,\r\n    passCount,\r\n    getCodes,\r\n    getQuestions,\r\n    postAnswer,\r\n    postFeedback,\r\n    setCode,\r\n  };\r\n};\r\n\r\nexport default useQuestionHook;\r\n","import axios from \"axios\";\r\nimport { QuesAnswerType } from \"model/questionType\";\r\n\r\n// 질문, 답변 블러오기 (get)\r\nconst getQues = async (answerId: number): Promise<QuesAnswerType> => {\r\n  try {\r\n    const response = await axios.get<QuesAnswerType>(\r\n      `/api/answer/${answerId}`,\r\n      {\r\n        withCredentials: true,\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default getQues;\r\n","import axios from \"axios\";\r\nimport { CommentListType } from \"model/questionType\";\r\n\r\n// 댓글 불러오기 (get)\r\nconst getFeed = async (answerId: number) => {\r\n  try {\r\n    const res = await axios.get<CommentListType[]>(`/api/comment/${answerId}`, {\r\n      withCredentials: true,\r\n    });\r\n    return res.data;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default getFeed;\r\n","import axios from \"axios\";\r\n\r\n// 질문 답변하기 (post)\r\nconst postAnswers = async (\r\n  answerId: number,\r\n  answerFst: string,\r\n  answerSec: string\r\n): Promise<void> => {\r\n  try {\r\n    await axios.post(`/api/answer/${answerId}`, {\r\n      answerFst,\r\n      answerSec,\r\n    });\r\n  } catch (error: unknown) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default postAnswers;\r\n","import axios, { AxiosResponse } from \"axios\";\r\n\r\n// 댓글 달기 (post)\r\nconst postFeed = async (\r\n  answerId: number,\r\n  comment: string,\r\n  selected: number\r\n): Promise<AxiosResponse> => {\r\n  try {\r\n    return await axios.post(`/api/comment/${answerId}`, {\r\n      comment, // 댓글\r\n      commentPassFail: selected,\r\n    });\r\n  } catch (error: unknown) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default postFeed;\r\n","import React, {Suspense } from \"react\";\r\nimport { renderNewlines } from \"components/common/Common\";\r\nimport { ProbCodeProps } from \"model/questionType\";\r\nimport Loading from \"components/common/Loading\";\r\nconst CodeEditor = React.lazy(() => import(\"components/problem/CodeEditor\")); // Lazy Loading 적용\r\n\r\n// 작성했던 코드 출력 컴포넌트\r\nconst ProbCode: React.FC<ProbCodeProps> = ({\r\n  FstHandler,\r\n  SecHandler,\r\n  code,\r\n  qnA,\r\n  setCode,\r\n  problemId\r\n}) => {\r\n  return (\r\n    <div className=\"code_question_container\">\r\n\r\n      {/* 좌측 코드에디터 컴포넌트 */}\r\n      <div className=\"code_container\">\r\n\r\n        {/* 에디터로 수정_by성임 - Lazy Loading 적용*/}\r\n        <Suspense fallback={<Loading/>}>\r\n          <CodeEditor\r\n            onChange={setCode}\r\n            readOnly={true}\r\n            code={code}\r\n          />\r\n        </Suspense>\r\n      </div>\r\n\r\n      {/* 우측 질문답변 컴포넌트 */}\r\n      <div className=\"question_container\">\r\n        {qnA.answerState === \"question\" ? (   // 기존 : !qnA.answerState || !qnA.answerSec\r\n          // answerState: question (qnA만 있음, 답변해야 하는 상태)\r\n          <>\r\n            <div className=\"question_layout\">\r\n              <div className=\"question_header\">\r\n                <div className=\"question_id\">질문 1</div>\r\n                <div className=\"header_title\">{qnA.questionContentFst}</div>\r\n              </div>\r\n              <textarea className=\"answer_input\" onChange={FstHandler} />\r\n            </div>\r\n\r\n            <div className=\"question_layout\">\r\n              <div className=\"question_header\">\r\n                <div className=\"question_id\">질문 2</div>\r\n                <div className=\"header_title\">{qnA.questionContentSec}</div>\r\n              </div>\r\n              <textarea className=\"answer_input\" onChange={SecHandler} />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          // < answerState 참고 >\r\n          // answerState: comment (qnA O / qnA.answerFst, qnA.answerSec O / feedback 0개 or 1개)\r\n          // answerState: success\r\n          // answerState: fail\r\n          <>\r\n            <div className=\"question_header\">\r\n              <div className=\"question_id\">질문 1</div>\r\n              <div className=\"header_title\">{qnA.questionContentFst}</div>\r\n            </div>\r\n\r\n            {/* 줄바꿈 반영하기_ by성임 */}\r\n            <div className=\"answer_input display\">\r\n              {renderNewlines(qnA.answerFst)}\r\n            </div>\r\n\r\n            <div className=\"question_header\">\r\n              <div className=\"question_id\">질문 2</div>\r\n              <div className=\"header_title\">{qnA.questionContentSec}</div>\r\n            </div>\r\n            <div className=\"answer_input display\">\r\n              {renderNewlines(qnA.answerSec)}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProbCode;\r\n","import React, { useState } from \"react\";\r\nimport useProbPage from \"hooks/problem/useProbPage\";\r\nimport { renderNewlines } from \"components/common/Common\";\r\nimport { StyledProblem } from \"styles/styledComponent/Problem-styled\";\r\nimport { ProbHeaderProps } from \"model/problemType\";\r\n\r\n\r\n\r\n// 문제 헤더 컴포넌트\r\nconst ProbHeader: React.FC<ProbHeaderProps> = ({ state, navigate, problemId }) => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState<boolean>(false);\r\n\r\n  // problem 제목, 내용 HOOK 호출 - null이나 undefined일때 -1전달\r\n  const { title, problem } = useProbPage(problemId ?? -1);\r\n\r\n  // 문제보기 dropdown 상태관리 함수\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen((prevState ) => !prevState );\r\n  }\r\n\r\n\r\n  // title과 problem이 null일 경우 기본값 설정 - TODO: 중복 수정하기\r\n  const titleText = title ? title.problemTitle : \"제목 없음\";\r\n  const problemContent = problem ? problem.problemContent : \"문제 내용 없음\";\r\n  const sampleInputs = problem ? problem.sampleInputs : [];\r\n  const sampleOutputs = problem ? problem.sampleOutputs : [];\r\n\r\n  // problemId가 null이거나 -1인 경우 예외처리\r\n  if (problemId === null || problemId === -1) {\r\n    return (\r\n      <StyledProblem className=\"problem_header_section\" state={state}>\r\n        <div className=\"problem_header\">\r\n          <div className=\"problem_group\">\r\n            <div className=\"problem_id\">알수없음</div>\r\n            <div className=\"header_title\">제목 없음</div>\r\n            <div className=\"header_answer_state\">알수없음</div>\r\n          </div>\r\n        </div>\r\n      </StyledProblem>\r\n    );\r\n  }\r\n  // 정상적인 경우\r\n  return (\r\n    <StyledProblem className=\"problem_header_section\" state={state}>\r\n      <div className=\"problem_header\">\r\n        <div className=\"problem_group\">\r\n          <div className=\"problem_id\">\r\n            문제{problemId !== null ? problemId : \"정보 없음\"}\r\n          </div>\r\n          <div className=\"header_title\">{titleText}</div>\r\n          <div className=\"header_answer_state\">\r\n            {state === \"success\"\r\n              ? \"성공\"\r\n              : state === \"fail\"\r\n              ? \"실패\"\r\n              : \"미완료\"}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"button_group\">\r\n        <button className=\"button_problem\" onClick={toggleDropdown}>\r\n          문제보기\r\n          {isDropdownOpen && (\r\n            <div className=\"dropdown_content\">\r\n              {/* 띄워쓰기 표현_ by성임*/}\r\n              <div className=\"content\" style={{ whiteSpace: \"pre\" }}>\r\n                {/* renderStyledNewlines: '\\n' 기준으로 줄바꿈 함수 */}\r\n                {renderNewlines(problemContent)}\r\n              </div>\r\n\r\n              <div className=\"sample_inputs\">\r\n                <h3>Sample Inputs:</h3>\r\n                {sampleInputs.map((input, index) => (\r\n                    <React.Fragment key={index}>\r\n                      {renderNewlines(input)}\r\n                    </React.Fragment>\r\n                  ))}\r\n              </div>\r\n\r\n              <div className=\"sample_outputs\" style={{ whiteSpace: \"pre\" }}>\r\n                <h3>Sample Outputs:</h3>\r\n                {sampleOutputs.map((output, index) => (\r\n                    <React.Fragment key={index}>\r\n                      {renderNewlines(output)}\r\n                    </React.Fragment>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </button>\r\n        {(state === \"success\" || state === \"fail\") && (\r\n          <button\r\n            className=\"button_solution\"\r\n            onClick={() => navigate(`/solution/${problemId}`)}\r\n          >\r\n            다른 풀이 보기\r\n          </button>\r\n        )}\r\n      </div>\r\n    </StyledProblem>\r\n  );\r\n};\r\n\r\nexport default ProbHeader;\r\n","import React, { useState } from \"react\";\r\nimport { renderNewlines } from \"components/common/Common\";\r\nimport { StyledQuestion } from \"styles/styledComponent/Question-styled\";\r\nimport { RenderFeedProps } from \"model/questionType\"; \r\n\r\n// feedback 렌더링 컴포넌트\r\nconst RenderFeed: React.FC<RenderFeedProps> = ({  // RenderFeed props 타입\r\n  navigate,\r\n  state,\r\n  textFst,\r\n  handleTextFstChange,\r\n  memberStatus,\r\n  feedbacks,\r\n  passCount,\r\n  postFeedback\r\n}) => {\r\n  const [buttonColor1, setButtonColor1] = useState<string>(\"rgba(4, 202, 0, 0.6)\");\r\n  const [buttonColor2, setButtonColor2] = useState<string>(\"rgba(244, 117, 117, 0.6)\");\r\n  const [selectedOption, setSelectedOption] = useState<string | null>(null);\r\n\r\n  // pass버튼 클릭 핸들러\r\n  const passButtonClick = () => {\r\n    setButtonColor2(\"rgba(244, 117, 117, 0.6)\"); // 다른 버튼 색상 초기화\r\n    setButtonColor1(\"rgba(4, 202, 0, 1)\"); // 현재 버튼 색깔 변경\r\n  };\r\n\r\n  // fail버튼 클릭 핸들러\r\n  const failButtonClick = () => {\r\n    setButtonColor1(\"rgba(4, 202, 0, 0.6)\"); // 다른 버튼 색상 초기화\r\n    setButtonColor2(\"rgba(244, 117, 117, 1)\"); // 현재 버튼 색깔 변경\r\n  };\r\n\r\n  // pass, fail 선택 핸들러\r\n  const handleOption = (option: string) => {\r\n    setSelectedOption(option);\r\n  };\r\n\r\n\r\n  // 댓글 제출 함수 - TODO : return확인 요함\r\n  const submitComment = () => {\r\n    if (!textFst || !textFst) {\r\n      alert(\"내용을 입력해주세요!\");\r\n      return;\r\n    }\r\n    if (!selectedOption) {\r\n      alert(\"통과 여부를 선택해주세요!\");\r\n      return;\r\n    } \r\n    \r\n    const isConfirmed = window.confirm(\"수정이 불가능합니다. 정말 제출하시겠습니까?\");\r\n    if (isConfirmed) {\r\n      postFeedback(textFst, parseInt(selectedOption, 10));\r\n    }\r\n  };\r\n\r\n  // 객체 값을 배열로 변환\r\n  const feedbackArray = feedbacks ? Object.values(feedbacks) : [];\r\n\r\n  return (\r\n    <StyledQuestion className=\"feedback_section_1\">\r\n      <hr\r\n        style={{\r\n          height: 2,\r\n          border: \"none\",\r\n          backgroundColor: \"gray\",\r\n          marginTop: 100,\r\n        }}\r\n      ></hr>\r\n\r\n      <div className=\"feedback_section\">\r\n        {/* 신입생 : comment상태일때, feedback 없을때 */}\r\n        {memberStatus === \"신입생\" &&\r\n          feedbackArray.length <= 0 &&\r\n          state === \"comment\" && (\r\n            <div className=\"feedback_waiting_bar\" onClick={() => navigate(`/`)}>\r\n              피드백을 기다리는 중입니다...\r\n            </div>\r\n          )}\r\n\r\n        {/* 신입생 : feedback 있을때 */}\r\n        {feedbackArray.length > 0 &&\r\n          feedbackArray.map((feedback, index) => (\r\n            <div className=\"feedback_container\" key={index}>\r\n              {feedback.commentPassFail === 1 ? (\r\n                <div className=\"feedback_result_pass\">PASS</div>\r\n              ) : (\r\n                <div className=\"feedback_result_fail\">FAIL</div>\r\n              )}\r\n              <div className=\"question_header\">\r\n                <div className=\"feedback_index\">{`Feedback ${index + 1}`}</div>\r\n                <div className=\"feedback_writer\">{feedback.writerGen}기</div>\r\n                <div className=\"feedback_writer\">{feedback.writerName}</div>\r\n              </div>\r\n\r\n              {/* 줄바꿈 반영하기_ by성임 */}\r\n              <div className=\"feedback_content display\">\r\n                {renderNewlines(feedback.commentContent)}\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n        {/* 재학생_ feedback 선택 */}\r\n        {(memberStatus === \"재학생\" || memberStatus === \"관리자\") &&\r\n          feedbackArray.length <= 1 &&\r\n          state === \"comment\" && (\r\n            <div className=\"feed_section\">\r\n              <div className=\"question_header\">\r\n                <div className=\"feedback_index\">Feedback</div>\r\n              </div>\r\n              <textarea\r\n                className=\"feedback_content input\"\r\n                placeholder=\"피드백을 입력해주세요.\"\r\n                onChange={handleTextFstChange}\r\n              />\r\n              {/* PASS FAIL 선택 */}\r\n              <div className=\"feedback_select_section\">\r\n                <div className=\"button_container\">\r\n                  <div\r\n                    className=\"select_button pass\"\r\n                    // isSelected={selectedOption === \"1\"}\r\n                    style={{ color: buttonColor1 }}\r\n                    onClick={() => {\r\n                      handleOption(\"1\");\r\n                      passButtonClick();\r\n                    }}\r\n                  >\r\n                    PASS\r\n                  </div>\r\n                  <div\r\n                    className=\"select_button fail\"\r\n                    // isSelected={selectedOption === \"0\"}\r\n                    style={{ color: buttonColor2 }}\r\n                    onClick={() => {\r\n                      handleOption(\"0\");\r\n                      failButtonClick();\r\n                    }}\r\n                  >\r\n                    FAIL\r\n                  </div>\r\n                </div>\r\n                <p className=\"select_comment\">PASS 혹은 FAIL을 선택해주세요.</p>\r\n              </div>\r\n              <button className=\"feedback_button\" onClick={submitComment}>\r\n                답변하기\r\n              </button>\r\n            </div>\r\n          )}\r\n      </div>\r\n\r\n      {feedbackArray.length >= 2 && (\r\n        <div className=\"result_container\">\r\n          <div\r\n            className={\r\n              passCount >= 1 && feedbackArray.length > 1\r\n                ? \"result success\"\r\n                : \"result fail\"\r\n            }\r\n            onClick={() => navigate(`/`)}\r\n          >\r\n            {passCount >= 1 && feedbackArray.length > 1\r\n              ? `축하합니다! 성공적으로 통과했습니다!  ( ${passCount}/2 )`\r\n              : `질문테스트에 통과하지 못했습니다.  ( ${passCount}/2 )`}\r\n          </div>\r\n          <p>클릭시 홈화면으로 이동합니다</p>\r\n        </div>\r\n      )}\r\n    </StyledQuestion>\r\n  );\r\n};\r\n\r\nexport default RenderFeed;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport {ProbHeader, ProbCode} from \"components/question\";\r\nimport { StyledQuestion } from \"styles/styledComponent/Question-styled\";\r\nimport { RenderAnswerUIProps } from \"model/questionType\";\r\n\r\n// 답변(answer) 렌더링 컴포넌트\r\nconst RenderAnswerUI: React.FC<RenderAnswerUIProps> = ({\r\n  navigate,\r\n  code,\r\n  qnA,\r\n  state,\r\n  setCode,\r\n  textFst,\r\n  handleTextFstChange, // 질문1 입력 핸들러\r\n  postAnswer,\r\n}) => {\r\n\r\n  // problemId 가져오기 - 이동하기\r\n  const problemId = Number(sessionStorage.getItem(\"problemId\"));\r\n\r\n  const [textSec, setTextSec] = useState<string>(\"\");\r\n\r\n  // 질문2 입력 핸들러\r\n  const handleTextSecChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setTextSec(e.target.value);\r\n  };\r\n\r\n  // 답변 제출 함수\r\n  const submitAnswer = () => {\r\n\r\n    if (!textFst || !textSec) { // 수정: !textSec.current -> !textSec\r\n      alert(\"내용을 입력해주세요!\");\r\n    } else {\r\n      const isConfirmed = window.confirm(\r\n        \"수정이 불가능합니다. 정말 제출하시겠습니까?\"\r\n      );\r\n\r\n      if (isConfirmed) {\r\n        postAnswer(textFst, textSec); // 수정: textFst.current, textSec.current -> textFst.current.value, textSec\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledQuestion className=\"problem_answer_section\">\r\n      {/* 문제 헤더 컴포넌트 */}\r\n      <ProbHeader state={state} navigate={navigate} problemId={problemId}/>  {/* 수정: code -> state*/}\r\n      \r\n      {/* 코드 출력 컴포넌트 */}\r\n      {qnA && (\r\n        <ProbCode\r\n          FstHandler={handleTextFstChange}\r\n          SecHandler={handleTextSecChange}\r\n          code={code}\r\n          qnA={qnA}\r\n          setCode={setCode}\r\n          problemId={problemId}\r\n        />\r\n      )}\r\n\r\n      {state === \"question\" && (!qnA.answerFst || !qnA.answerSec) && (\r\n        <div className=\"btn_container\">\r\n          <button className=\"button answer\" onClick={submitAnswer}>\r\n            답변하기\r\n          </button>\r\n        </div>\r\n      )}\r\n    </StyledQuestion>\r\n  );\r\n};\r\n\r\nexport default RenderAnswerUI;\r\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useQuestionHook from \"hooks/question/useQuestionHook\";\r\nimport RenderAnswerUI from \"components/question/RenderAnswerUI\";\r\nimport RenderFeed from \"components/question/RenderFeed\";\r\nimport Loading from \"components/common/Loading\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"stores/store\"; // RootState 임포트\r\n\r\nconst QuestionPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // questionId 저장 - 사용자 풀이에 사용\r\n  let url = new URL(window.location.href);\r\n  let answerId = Number(url.pathname.split(\"/\")[2]);\r\n\r\n  // problemId 가져오기 - 해당 문제 정보에 사용\r\n  const problemId = Number(sessionStorage.getItem(\"problemId\"));\r\n\r\n  // 첫번재 답변 관리 - useRef로 필요 시점에만 상태 관리\r\n  const [textFst, setTextFst] = useState<string>(\"\");\r\n\r\n  // 첫번재 답변 작성 핸들러\r\n  const handleTextFstChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setTextFst(e.target.value);\r\n  };\r\n\r\n  // 댓글 제출 결과 alert 함수\r\n  const getAlert = (responseStatus: number) => {\r\n    if (responseStatus === 400) {\r\n      alert(\"이미 댓글을 달았습니다.\");\r\n    } else if (responseStatus === 403) {\r\n      alert(\"접근할 수 있는 사용자가 아닙니다.\");\r\n    }\r\n  };\r\n\r\n  // question 관련 HOOK 호출\r\n  const {\r\n    code,\r\n    qnA,\r\n    state,\r\n    feedbacks,\r\n    passCount,\r\n    postFeedback,\r\n    postAnswer,\r\n    setCode,\r\n  } = useQuestionHook(answerId, getAlert, problemId);\r\n\r\n  // useMemberStatus HOOK 호출 -> 수정: sessionStorage 사용 -> redux사용\r\n  const { memberStatus } = useSelector((state: RootState) => state.user); // redux에서 가져오기\r\n\r\n  useEffect(() => {\r\n    if (memberStatus === '' || memberStatus ===null) {\r\n      alert(\"풀이 열람 권한이 없습니다!\");\r\n      navigate(-1);\r\n    }\r\n  }, [memberStatus, qnA, navigate]);\r\n\r\n  if (qnA === null) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    // 성공 or 실패에 따른 배경색\r\n    <div\r\n      className={\r\n        state === \"success\"\r\n          ? \"successPage\"\r\n          : state === \"fail\"\r\n          ? \"failPage\"\r\n          : \"nonePage\"\r\n      }\r\n    >\r\n      <div>\r\n        {/* qnA가 null일 경우 처리 */}\r\n        {qnA ? (\r\n          <>\r\n            <RenderAnswerUI\r\n              navigate={navigate}\r\n              code={code}\r\n              qnA={qnA}\r\n              state={state}\r\n              setCode={setCode}\r\n              textFst={textFst}\r\n              handleTextFstChange={handleTextFstChange}\r\n              postAnswer={postAnswer}\r\n            />\r\n\r\n            <RenderFeed\r\n              navigate={navigate}\r\n              memberStatus={memberStatus}\r\n              feedbacks={feedbacks}\r\n              passCount={passCount}\r\n              state={state}\r\n              postFeedback={postFeedback}\r\n              textFst={textFst}\r\n              handleTextFstChange={handleTextFstChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          <Loading />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionPage;\r\n","import styled from \"styled-components\";\r\nimport { StyledProps } from \"model/problemType\"; \r\n\r\nexport const StyledProblem = styled.div<StyledProps>`\r\n    .problem_header {\r\n        width: 80%;\r\n        height: 78px;\r\n        display: flex;\r\n        align-items: center;\r\n        margin-top: 40px;\r\n        margin-bottom: 16px;\r\n        position: relative;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        justify-content: space-between;\r\n    }\r\n    .button_group{\r\n        width: 80%;\r\n        margin: 0 auto 32px;\r\n        justify-content: right;\r\n    }\r\n    .problem_group {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    .problem_id {\r\n        width: 80px;\r\n        height: fit-content;\r\n        font-size: 19px;\r\n\r\n        padding: 8px 0;\r\n        font-weight: bold;\r\n        // background-color: #ffffff;\r\n        background-color:#3B3B3B;\r\n        color : #ffffff;\r\n        border:solid 3px #3B3B3B; opacity:80%;\r\n        border-radius : 50px;\r\n        text-align: center;\r\n        margin-right: 20px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n    }\r\n    .header_title {\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        text-align: left;\r\n        margin-right: 8px;\r\n    }\r\n    .header_score {\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        text-align: left;\r\n        margin-left: 20px;\r\n    }\r\n    .header_answer_state {\r\n        width: fit-content;\r\n        padding: 8px 16px;\r\n        // color: ${props => props.state === \"success\" ? \"#5094F9\" : props.state === \"fail\" ? \"rgba(235, 52, 52, 0.8)\" : \"#6A6B6F\"};\r\n        // background-color: #ffffff;\r\n\r\n        /* border: solid 3px ${props => props.state === \"success\" ? \"#5094F9\" \r\n            : props.state === \"fail\" ? \"rgba(235, 52, 52, 0.8)\" \r\n            : \"#DEDEDE\"};\r\n        background-color: ${props => props.state === \"success\" ? \"#0025cae0; opacity:70%;\"\r\n        : props.state === \"fail\" ? \"rgb(255, 53, 53, 0.9)\" \r\n        : \"#3B3B3B; opacity:70%\"}; */\r\n        \r\n        color: ${props => props.state === \"success\" ? \"#0025cae0; opacity:70%;\" \r\n            : props.state === \"fail\" ? \"rgb(255, 53, 53, 0.9)\" \r\n            : \"#3B3B3B; opacity:70%\"};\r\n        border: solid 3px ${props => props.state === \"success\" ? \"#0025cae0; opacity:70%;\"\r\n            : props.state === \"fail\" ? \"rgb(246, 73, 73, 0.9)\" \r\n            : \"#3B3B3B; opacity:70%\"};\r\n\r\n        font-size: 19px;\r\n        font-weight: bold;\r\n        margin-right: 10px;\r\n        border-radius : 50px;\r\n        box-sizing: border-box;\r\n        box-shadow: 1px 2px #CCC9C9;\r\n    }\r\n    .description {\r\n        width: 1376px;\r\n        font-size: 20px;\r\n        align-items: center;\r\n        margin: auto;\r\n        background-color: beige;\r\n        text-align: left;\r\n    }\r\n\r\n    .problem_section{\r\n        width:80%;\r\n        height:100vh;\r\n        margin: 60px auto 0;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-bottom:20px;\r\n    }\r\n\r\n    &.problem_header_section {\r\n        z-index: 998;\r\n        position: relative;\r\n    }\r\n\r\n    .code_section{\r\n        flex: 5;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        margin: auto 0;\r\n        height:100%;\r\n    }\r\n\r\n    .content_container {\r\n        width: 40%;\r\n        height: auto;\r\n        justify-content: center;\r\n        flex: 4;\r\n\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-right: 60px;\r\n        // background-color: #ffffff;\r\n        // border-radius : 20px;\r\n        // box-shadow: 1px 3px #CCC9C9;\r\n        //   overflow-y: auto;\r\n\r\n    }\r\n    .content_container > .top,\r\n    .content_container > .bottom{\r\n        background-color: #ffffff;\r\n        border-radius : 20px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n        overflow-y: auto;\r\n        padding:12px;\r\n        width: 100%;\r\n\r\n        min-height: 240px;\r\n    }\r\n\r\n    // 스크롤바 디자인\r\n    ::-webkit-scrollbar {\r\n    width: 10px;  \r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n    background: #c0c0c0; /* 스크롤바 색상 */\r\n    border-radius: 10px; /* 스크롤바 둥근 테두리 */\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n    background: #e7e6f696;  /*스크롤바 뒷 배경 색상*/\r\n    }\r\n\r\n    .content_container > .top{\r\n\r\n        text-align: left;\r\n        margin: 0 auto 4px;\r\n        border-bottom: solid 1px;\r\n        height: 45%;\r\n    }\r\n    .content_container > .bottom{\r\n        height: 55%;\r\n\r\n    }\r\n    .content_container > .bottom > .sample_inputs {\r\n        width: 90%;\r\n        display:flex;\r\n        flex-direction:column;\r\n        align-items: start;\r\n\r\n        text-align: left;\r\n        margin: auto;\r\n    }\r\n    .underline\r\n    {\r\n        font-size:18px;\r\n        text-decoration:underline;\r\n        text-underline-offset : 6px;\r\n        text-decoration-color: #5094F9; opacity:70%;\r\n\r\n        color:#000000;\r\n     \r\n        font-size: 19px;\r\n        // font-weight: bold;\r\n        margin-bottom: 12px;\r\n    }\r\n    .top > .prob_text{\r\n        font-weight:bold;\r\n    }\r\n    .sample_inputs > .input_text{\r\n        font-weight:bold;\r\n    }\r\n    .sample_outputs > .output_text{\r\n        font-weight:bold;\r\n    }\r\n\r\n    // input요소들 중 순서에 따라 색깔 부여\r\n    .input_text > *:nth-child(1),\r\n    .output_text > *:nth-child(1){\r\n        color: rgb(124, 124, 124);\r\n    }\r\n    .input_text > *:nth-child(2n),\r\n    .output_text > *:nth-child(2n){\r\n        color: #a1a1ff;\r\n    }\r\n    .input_text > *:nth-child(3n),\r\n    .output_text > *:nth-child(3n){\r\n        color: #d783ff;\r\n    }\r\n\r\n    .content_container > .bottom > .sample_outputs {\r\n        width: 90%;\r\n        text-align: left;\r\n        margin: auto;\r\n    }\r\n    .sample_outputs > .underline{\r\n        margin-top:40px;\r\n    }\r\n\r\n\r\n    .code_input {\r\n        width: 100%;\r\n        height: 100%;\r\n        min-height: 564px;\r\n        font-size: 18px;\r\n        // color: #ffffff;\r\n        display: flex;\r\n        justify-content: center;\r\n        background-color: #3e3e3e;\r\n        overflow-y: auto;\r\n\r\n        border-radius : 20px;\r\n        padding: 16px 8px 0 12px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n        box-sizing: border-box;\r\n    }\r\n    .submit_button {\r\n        width: fit-content;\r\n        height: fit-content;\r\n        background-color: #9747FF;\r\n        color: white;\r\n        font-size: 20px;\r\n        border-radius: 5px;\r\n        border: none;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin: 80px auto 40px;\r\n        padding: 4px 36px;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n    }\r\n    .submit_button.disabled {\r\n        background-color: #dedede;\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    .code_container {\r\n        width: 1376px;\r\n        height: auto;\r\n        display: flex;\r\n        align-items: center;\r\n        margin: auto;\r\n        border-radius: 5px;\r\n        background-color: beige;\r\n        font-size: 20px;\r\n        white-space: pre-line; \r\n    }\r\n   \r\n    .title {\r\n        width: fit-content;\r\n        display: flex;\r\n        font-size: 24px;\r\n        font-weight: bold;\r\n        margin: 0 auto;\r\n        margin-top: 20px;\r\n        margin-bottom: 10px;\r\n    }\r\n    .result_container {\r\n        width: 1376px;\r\n    height: auto;\r\n    background-color: #eee;\r\n    margin: 0 auto;\r\n    margin-bottom: 20px;\r\n    font-size: 20px;\r\n    white-space: pre-line; \r\n    text-align: left;\r\n    }\r\n    .loading {\r\n        height: 1500px\r\n    }\r\n    .detail_container {\r\n        width: 100%;\r\n        height: auto;\r\n        justify-content: center;\r\n        text-align: left;\r\n        margin-top: 40px;\r\n    }\r\n    .detail_content {\r\n        min-height: 150px;\r\n        text-align: left;\r\n        padding: 16px 8px 0 12px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n        box-sizing: border-box;\r\n        background-color: rgba(109, 99, 228, 0.3);\r\n        font-size: 20px;\r\n        border-radius: 15px;\r\n    }\r\n`;","import styled from \"styled-components\";\r\nimport { StyledQuestionProps } from \"model/questionType\"; \r\n\r\n\r\nexport const StyledQuestion = styled.div<StyledQuestionProps>`\r\n  .code_question_container {\r\n    width: 95%;\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 5%;\r\n    position: relative;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n  }\r\n  .code_container {\r\n    width: 40%;\r\n    height: 564px;\r\n    font-size: 20px;\r\n  }\r\n  .question_container {\r\n    width: 40%;\r\n  }\r\n  .question_layout {\r\n    width: 100%;\r\n  }\r\n  .question_header {\r\n    width: 100%;\r\n    height: 70px;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 20px auto 0;\r\n  }\r\n  .question_id {\r\n    width: 80px;\r\n    padding: 8px 0;\r\n    height: fit-contents;\r\n    text-align: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    display: flex;\r\n    color: #325cc7;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n    border-radius: 50px;\r\n    background-color: #ffffff;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n  }\r\n  .header_title {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    flex: 1;\r\n    text-align: left;\r\n  }\r\n  .answer_input {\r\n    width: 100%;\r\n    height: 181px;\r\n    font-size: 20px;\r\n    display: flex;\r\n    background-color: #ffffff;\r\n    border: solid #ffffff;\r\n    border-radius: 20px;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n    overflow-wrap: break-word;\r\n    padding: 4px 12px;\r\n  }\r\n  .answer_input.display {\r\n    text-align: left;\r\n    padding: 10px;\r\n    box-sizing: border-box;\r\n    /* 내용 초과시 스크롤바 */\r\n    overflow-y: auto;\r\n  }\r\n\r\n  /* 스크롤바 */\r\n  .answer_input.display::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n  .answer_input.display::-webkit-scrollbar-thumb {\r\n    background: #c0c0c0; /* 스크롤바 색상 */\r\n    border-radius: 10px; /* 스크롤바 둥근 테두리 */\r\n  }\r\n  .answer_input.display::-webkit-scrollbar-track {\r\n    background: #e7e6f696; /*스크롤바 뒷 배경 색상*/\r\n  }\r\n\r\n  /* 스크롤바 */\r\n  .answer_input::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n  .answer_input::-webkit-scrollbar-thumb {\r\n    background: #c0c0c0; /* 스크롤바 색상 */\r\n    border-radius: 10px; /* 스크롤바 둥근 테두리 */\r\n  }\r\n  .answer_input::-webkit-scrollbar-track {\r\n    background: #e7e6f696; /*스크롤바 뒷 배경 색상*/\r\n  }\r\n\r\n  .button_group {\r\n    display: flex;\r\n  }\r\n  .button {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    padding: 8px 32px;\r\n    color: white;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    border-radius: 5px;\r\n    border: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n  }\r\n  .button.answer {\r\n    background-color: #ac6dfd;\r\n    margin: 60px auto;\r\n    &:hover {\r\n      background-color: #9747ff;\r\n    }\r\n  }\r\n  .btn_container {\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    width: 80%;\r\n    margin: 28px auto;\r\n  }\r\n\r\n  .button_problem {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    position: relative;\r\n    padding: 8px 20px;\r\n    color: white;\r\n    font-weight: bold;\r\n    border-radius: 50px;\r\n    border: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n\r\n    background-color: #3b3b3b;\r\n    font-size: 16px;\r\n  }\r\n  .button_problem:hover {\r\n    background-color: #3b3b3b;\r\n    opacity: 80%;\r\n  }\r\n  .button_solution {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    padding: 8px 20px;\r\n    color: white;\r\n    font-weight: bold;\r\n    border-radius: 50px;\r\n    border: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n\r\n    background-color: rgba(109, 99, 228, 0.6);\r\n    margin-left: 20px;\r\n    font-size: 16px;\r\n  }\r\n  .button_solution:hover {\r\n    background-color: rgba(109, 99, 228, 0.8);\r\n  }\r\n  /* feedback (comment) */\r\n  .feedback_section {\r\n    width: 80%;\r\n    justify-content: space-between;\r\n    display: flex;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    position: relative;\r\n  }\r\n  .feedback_waiting_bar {\r\n    width: 60%;\r\n    margin: 100px auto;\r\n    padding: 12px 0;\r\n    background-color: rgba(109, 99, 228, 0.6);\r\n    color: #ffffff;\r\n    border-radius: 15px;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n\r\n    cursor: pointer;\r\n  }\r\n  .feedback_container {\r\n    margin-top: 88px;\r\n    width: 45%;\r\n  }\r\n  .feedback_result_pass,\r\n  .feedback_result_fail {\r\n    width: 100px;\r\n    text-align: left;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    margin-bottom: 12px;\r\n  }\r\n  .feedback_result_pass {\r\n    color: #04ca00;\r\n  }\r\n  .feedback_result_fail {\r\n    color: rgba(244, 117, 117, 0.9);\r\n  }\r\n  .feedback_index {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    padding: 8px 24px;\r\n    border-radius: 50px;\r\n    text-align: center;\r\n    // background-color: #9747FF; opacity:60%;\r\n    background-color: #3b3b3b;\r\n    color: #ffffff;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n  }\r\n  .feedback_writer {\r\n    margin-left: 20px;\r\n    font-size: 20px;\r\n    color: #3e3e3e;\r\n    font-weight: bold;\r\n  }\r\n  .feedback_content {\r\n    width: 100%;\r\n    font-size: 20px;\r\n    background-color: #ffffff;\r\n    border: solid #ffffff;\r\n    border-radius: 20px;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n    overflow-wrap: break-word;\r\n    margin-top: 10px;\r\n    color: #3e3e3e;\r\n  }\r\n  .feed_section {\r\n    width: 40%;\r\n  }\r\n  .feedback_content.input {\r\n    height: 270px;\r\n    padding: 12px;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n  }\r\n  .feedback_content.display {\r\n    height: 250px;\r\n    text-align: left;\r\n    padding: 10px;\r\n    box-sizing: border-box;\r\n    /* 내용 초과시 스크롤바 */\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .feedback_content.display::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n  .feedback_content.display::-webkit-scrollbar-thumb {\r\n    background: #c0c0c0; /* 스크롤바 색상 */\r\n    border-radius: 10px; /* 스크롤바 둥근 테두리 */\r\n  }\r\n  .feedback_content.display::-webkit-scrollbar-track {\r\n    background: #e7e6f696; /*스크롤바 뒷 배경 색상*/\r\n  }\r\n\r\n  // 수정하기\r\n  .feedback_content::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n  .feedback_content::-webkit-scrollbar-thumb {\r\n    background: #c0c0c0; /* 스크롤바 색상 */\r\n    border-radius: 10px; /* 스크롤바 둥근 테두리 */\r\n  }\r\n  .feedback_content::-webkit-scrollbar-track {\r\n    background: #e7e6f696; /*스크롤바 뒷 배경 색상*/\r\n  }\r\n\r\n  .feedback_select_section {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  .button_container {\r\n    width: fit-content;\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 20px;\r\n    margin: 40px 0 40px;\r\n  }\r\n  .select_button {\r\n    font-size: 36px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n  .select_button.pass {\r\n    color: ${(props) =>\r\n      props.isSelected ? \"rgba(4, 202, 0, 1)\" : \"rgba(4, 202, 0, 0.6)\"};\r\n    &:hover {\r\n      color: rgba(4, 202, 0, 1);\r\n    }\r\n    margin-right: 20px;\r\n  }\r\n  .select_button.fail {\r\n    color: ${(props) =>\r\n      props.isSelected ? \"rgba(244, 117, 117, 1)\" : \"rgba(244, 117, 117, 0.6)\"};\r\n    &:hover {\r\n      color: rgba(244, 117, 117, 1);\r\n    }\r\n  }\r\n  .select_comment {\r\n    font-size: 20px;\r\n    color: #6f6f6f;\r\n  }\r\n  .feedback_button {\r\n    width: 100%;\r\n    height: fit-content;\r\n    padding: 10px 0;\r\n    border: solid 1px rgba(109, 99, 228, 0.6);\r\n    border-radius: 60px;\r\n    background-color: rgba(109, 99, 228, 0.6);\r\n    color: #ffffff;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    align-items: center;\r\n    margin-top: 10px;\r\n    cursor: pointer;\r\n  }\r\n  .feedback_button:hover {\r\n    background-color: rgba(109, 99, 228, 1);\r\n  }\r\n\r\n  .result_container > p {\r\n    color: #665f5f;\r\n    opacity: 60%;\r\n  }\r\n  .result.success {\r\n    width: 70%;\r\n    height: fit-content;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 120px auto 10px;\r\n    padding: 12px 0;\r\n\r\n    // background-color: #04ca00; opacity:57%;\r\n    background-color: #0025cae0;\r\n    opacity: 57%;\r\n    color: #ffffff;\r\n    border-radius: 15px;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: #0025cae0;\r\n      opacity: 70%;\r\n    }\r\n  }\r\n  .result.fail {\r\n    width: 70%;\r\n    height: fit-content;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 120px auto 10px;\r\n    padding: 12px 0;\r\n\r\n    background-color: rgba(244, 117, 117, 0.8);\r\n    color: #ffffff;\r\n    border-radius: 15px;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    box-shadow: 1px 3px #ccc9c9;\r\n\r\n    cursor: pointer;\r\n  }\r\n  .result.fail:hover {\r\n    background-color: rgba(244, 117, 117, 1);\r\n  }\r\n  .loading {\r\n    height: 1500px;\r\n  }\r\n\r\n  .dropdown_content {\r\n    background-color: #fefdfd;\r\n    border: 2px solid #c8c8c8;\r\n    border-radius: 8px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-right: 0;\r\n    padding: 40px 20px;\r\n    position: absolute;\r\n    top: 40px;\r\n    right: -10px;\r\n\r\n    width: 520px;\r\n    min-width: 200px;\r\n    z-index: 999;\r\n    color: black;\r\n\r\n    // 글자 튀어나옴 방지_ by성임\r\n    word-break: break-all;\r\n  }\r\n\r\n  .dropdown_content > .content {\r\n    text-align: left;\r\n  }\r\n\r\n  .sample_inputs {\r\n    text-align: left;\r\n  }\r\n  .sample_outputs {\r\n    text-align: left;\r\n  }\r\n`;\r\n"],"names":["async","axios","problemId","withCredentials","data","error","console","log","transferTime","time","replace","goBack","window","history","back","renderNewlines","text","split","map","line","index","_jsxs","React","children","_jsx","renderStyledNewlines","problem","setProblem","useState","fetchProblem","useCallback","response","getProbContent","useEffect","navigate","useNavigate","useRef","detail","setDetail","textHandler","newCode","current","submitCode","status","request","code","postSubmitCode","alert","sessionStorage","setItem","toString","answer_id","message","title","setTitle","fetchTitle","titleData","getProbTitle","useProbTitle","useProbContent","useSubmitCode","useSelector","state","sign","isLogin","useQuestionHook","answerId","getAlert","setState","setCode","qnA","setQnA","feedbacks","setFeedbacks","passCount","setPassCount","getCodes","getCode","getQuestions","getQues","answerState","getFeedback","getFeed","i","length","commentPassFail","postAnswer","answerFst","answerSec","postAnswers","location","reload","postFeedback","comment","selected","postFeed","CodeEditor","_ref","FstHandler","SecHandler","className","Suspense","fallback","Loading","onChange","readOnly","_Fragment","questionContentFst","questionContentSec","isDropdownOpen","setIsDropdownOpen","useProbPage","titleText","problemTitle","problemContent","sampleInputs","sampleOutputs","StyledProblem","onClick","toggleDropdown","prevState","style","whiteSpace","input","output","textFst","handleTextFstChange","memberStatus","buttonColor1","setButtonColor1","buttonColor2","setButtonColor2","selectedOption","setSelectedOption","handleOption","option","feedbackArray","Object","values","StyledQuestion","height","border","backgroundColor","marginTop","feedback","writerGen","writerName","commentContent","placeholder","color","submitComment","confirm","parseInt","Number","getItem","textSec","setTextSec","ProbHeader","ProbCode","e","target","value","submitAnswer","QuestionPage","url","URL","href","pathname","setTextFst","responseStatus","user","RenderAnswerUI","RenderFeed","styled","div","props","isSelected"],"sourceRoot":""}