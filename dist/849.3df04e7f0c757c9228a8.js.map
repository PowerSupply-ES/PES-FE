{"version":3,"file":"849.3df04e7f0c757c9228a8.js","mappings":"uIAKA,MAwCA,EAxCmBA,MAAOC,EAAwBC,KAGhD,IAO0B,aANDC,IAAAA,KAHb,aAG6BF,EAAQ,CAC7CG,QAAS,CACP,eAAgB,uBAIPC,SACXC,MAAM,wBACNJ,EAAS,WAEb,CAAE,MAAOK,GAEHJ,IAAAA,aAAmBI,GACjBA,EAAMC,SAEsB,MAA1BD,EAAMC,SAASH,OACjBC,MAAM,YAENA,MACE,aAAaC,EAAMC,SAASH,UAAUE,EAAMC,SAASC,cAGhDF,EAAMG,QAEfJ,MAAM,gBAGNA,MAAM,UAAUC,EAAMI,WAIxBL,MAAM,iBAAkBC,EAAgBI,UAE5C,E,+FCtCK,MAAMC,EAAgBC,GACtBA,EAEEA,EAAKC,QAAQ,IAAK,KAFP,GAMPC,EAASA,KACpBC,OAAOC,QAAQC,MAAM,EAKVC,EAAkBC,GACtBA,EAAKC,MAAM,MAAMC,KAAI,CAACC,EAAMC,KACjCC,EAAAA,EAAAA,MAACC,IAAAA,SAAc,CAAAC,SAAA,CACZJ,GACDK,EAAAA,EAAAA,KAAA,WAFmBJ,KAQZK,EAAwBT,GACrBA,EAAKC,MAAM,QACZC,KAAI,CAACC,EAAMC,KAEpBC,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACGJ,GACDK,EAAAA,EAAAA,KAAA,WAFSJ,I,mHCzBjB,MAgEA,EAhE6BM,KAC3B,MAAM,OAAE7B,EAAM,kBAAE8B,EAAiB,aAAEC,GCCfC,MACpB,MAAM/B,GAAWgC,EAAAA,EAAAA,OAEVjC,EAAQkC,IAAaC,EAAAA,EAAAA,UAAyB,CACnDC,MAAO,GACPC,QAAS,GACTC,aAAa,IAsBf,MAAO,CAAEtC,SAAQ8B,kBAlBUS,IACzB,MAAM,KAAEC,EAAI,MAAEC,EAAK,KAAEC,GAASH,EAAEI,OAG1BC,EAAoB,aAATF,GAAuB1C,EAAOsC,YAAcG,EAE7DP,EAAU,IAELlC,EACH,CAACwC,GAAOI,GACR,EAQgCb,aAJfA,MACnBc,EAAAA,EAAAA,GAAW7C,EAAQC,EAAS,EAGoB,ED7BE+B,GAEpD,OAEEL,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,YAAWpB,UACxBF,EAAAA,EAAAA,MAAA,OAAKsB,UAAU,mBAAkBpB,SAAA,EAE/BF,EAAAA,EAAAA,MAAA,OAAKsB,UAAU,SAAQpB,SAAA,EACrBC,EAAAA,EAAAA,KAACoB,EAAAA,IAAgB,CAACC,KAAM,MACxBrB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAILC,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,WAAUpB,UACvBC,EAAAA,EAAAA,KAAA,UAAQsB,QAASA,KAAMnC,EAAAA,EAAAA,MAASY,SAAC,YAInCF,EAAAA,EAAAA,MAAA,QAAMsB,UAAU,kBAAiBpB,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,SACEe,KAAK,WACLQ,GAAG,YACHV,KAAK,cACLW,QAASnD,EAAOsC,YAChBc,SAAUtB,KAEZH,EAAAA,EAAAA,KAAA,SAAO0B,QAAQ,YAAW3B,SAAC,WAI7BC,EAAAA,EAAAA,KAAA,SACEmB,UAAU,kBACVM,SAAUtB,EACVW,MAAOzC,EAAOoC,MACdI,KAAK,QACLc,UAAQ,EACRC,YAAY,eAId5B,EAAAA,EAAAA,KAAA,YACEmB,UAAU,kBACVM,SAAUtB,EACVW,MAAOzC,EAAOqC,QACdG,KAAK,UACLc,UAAQ,EACRC,YAAY,eAGd5B,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,gBAAepB,UAC5BC,EAAAA,EAAAA,KAAA,UACEmB,UAAU,aACVG,QAASA,KACPlB,GAAc,EACdL,SACH,eAKD,C","sources":["webpack://pes-fe/./src/apis/notice/postNotice.ts","webpack://pes-fe/./src/components/common/Common.tsx","webpack://pes-fe/./src/pages/notice/noticePostPage.tsx","webpack://pes-fe/./src/hooks/notice/useNoticePost.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { PostNoticeType } from \"model/noticeType\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\n\r\n// 공지사항 post API 호출\r\nconst postNotice = async (notice: PostNoticeType, navigate:NavigateFunction) => {\r\n  const uri = \"api/notice\";\r\n\r\n  try {\r\n    const response = await axios.post(uri, notice, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (response.status === 201) {\r\n      alert(\"공지사항이 성공적으로 등록되었습니다!\");\r\n      navigate(\"/notice\");\r\n    }\r\n  } catch (error: unknown) {\r\n    // axios에서 발생한 오류인 경우\r\n    if (axios.isAxiosError(error)) {\r\n      if (error.response) {\r\n        // 서버가 응답을 반환한 경우\r\n        if (error.response.status === 403) {\r\n          alert(\"권한이 없습니다\");\r\n        } else {\r\n          alert(\r\n            `서버 응답 오류: ${error.response.status} ${error.response.statusText}`\r\n          );\r\n        }\r\n      } else if (error.request) {\r\n        // 요청이 이루어졌으나 응답이 없는 경우\r\n        alert(\"서버 응답이 없습니다.\");\r\n      } else {\r\n        // 설정 중 오류 발생\r\n        alert(`요청 실패: ${error.message}`);\r\n      }\r\n    }\r\n    else { // axios와 무관한 오류인 경우\r\n      alert(`알 수 없는 오류 발생: ${(error as Error).message}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport default postNotice;\r\n","import React from \"react\";\r\n// ===== 공용 함수 지정 =====\r\n\r\n// --- Time에서 \"T\" 제거하여 표시하는 함수\r\nexport const transferTime = (time: string | null | undefined) => {\r\n  if (!time) return \"\"; // 시간이 없는 경우 처리\r\n\r\n  return time.replace(\"T\", \" \");\r\n};\r\n\r\n// --- 뒤로가기 함수\r\nexport const goBack = () => {\r\n  window.history.back();\r\n};\r\n\r\n// --- '\\n' 기준으로 줄바꿈하는 함수\r\n// React.ReactNode : JSX반환타입\r\nexport const renderNewlines = (text: string): React.ReactNode => {\r\n  return text.split(\"\\n\").map((line, index) => (\r\n    <React.Fragment key={index}>\r\n      {line}\r\n      <br />\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// --- '\\n\\n' 기준으로 줄바꿈하는 함수\r\nexport const renderStyledNewlines = (text: string): React.ReactNode => {\r\n  const lines = text.split(\"\\n\\n\"); // 각 줄을 분할\r\n  return lines.map((line, index) => {\r\n    return (\r\n      <span key={index}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    );\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { PiNotePencilFill } from \"react-icons/pi\";\r\nimport \"styles/css/notice.css\";\r\nimport { goBack } from \"components/common/Common\";\r\nimport useNoticePost from \"hooks/notice/useNoticePost\";\r\n\r\nconst NoticePost: React.FC = () => {\r\n  const { notice, handleInputChange, handleSubmit } = useNoticePost();\r\n\r\n  return (\r\n    // 관리자만 접근할 수 있도록 수정하기\r\n    <div className=\"info_body\">\r\n      <div className=\"content_register\">\r\n        {/* 제목 */}\r\n        <div className=\"header\">\r\n          <PiNotePencilFill size={30} />\r\n          <p>공지사항 등록</p>\r\n        </div>\r\n\r\n        {/* 버튼 */}\r\n        <div className=\"btn_back\">\r\n          <button onClick={() => goBack()}>뒤로가기</button>\r\n        </div>\r\n\r\n        {/* 체크박스 */}\r\n        <form className=\"check_container\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"important\"\r\n            name=\"isImportant\"\r\n            checked={notice.isImportant}\r\n            onChange={handleInputChange}\r\n          />\r\n          <label htmlFor=\"important\">중요</label>\r\n        </form>\r\n\r\n        {/* 제목 */}\r\n        <input\r\n          className=\"title_container\"\r\n          onChange={handleInputChange} /* 입력 값이 변경될 때 핸들러 추가 */\r\n          value={notice.title}\r\n          name=\"title\"\r\n          required\r\n          placeholder=\"제목을 입력하세요\"\r\n        ></input>\r\n\r\n        {/* 본문 */}\r\n        <textarea\r\n          className=\"input_container\"\r\n          onChange={handleInputChange} /* 입력 값이 변경될 때 핸들러 추가 */\r\n          value={notice.content}\r\n          name=\"content\"\r\n          required\r\n          placeholder=\"본문을 입력하세요\"\r\n        ></textarea>\r\n\r\n        <div className=\"btn_container\">\r\n          <button\r\n            className=\"btn_submit\"\r\n            onClick={() => {\r\n              handleSubmit();\r\n            }}\r\n          >\r\n            등록하기\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default NoticePost;\r\n","import { ChangeEvent, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport postNotice from \"apis/notice/postNotice\";\r\nimport { PostNoticeType } from \"model/noticeType\";\r\n\r\n// TODO : hook들 모두 반환타입 지정하기\r\n\r\n// 공지사항 등록 관련 HOOK\r\nconst useNoticePost = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [notice, setNotice] = useState<PostNoticeType>({\r\n    title: \"\",\r\n    content: \"\",\r\n    isImportant: false, //초기값 false로 설정\r\n  });\r\n\r\n  //입력필드 값 변경될때마다 호출\r\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => { // onChange 이벤트가 발생하는 입력 요소에 대한 이벤트 객체\r\n    const { name, value, type } = e.target;\r\n\r\n    // 입력 요소의 타입이 체크박스이고 checked 속성이 있다면 해당 값에 따라 isImportant 값을 변경\r\n    const newValue = type === \"checkbox\" ? !notice.isImportant : value;\r\n\r\n    setNotice({\r\n      // notice복사, 변경된 필드만 업데이트\r\n      ...notice,\r\n      [name]: newValue,\r\n    });\r\n  };\r\n\r\n  // 폼이 제출될 때 호출\r\n  const handleSubmit = () => {\r\n    postNotice(notice, navigate);\r\n  };\r\n\r\n  return { notice, handleInputChange, handleSubmit };\r\n};\r\n\r\nexport default useNoticePost;\r\n"],"names":["async","notice","navigate","axios","headers","status","alert","error","response","statusText","request","message","transferTime","time","replace","goBack","window","history","back","renderNewlines","text","split","map","line","index","_jsxs","React","children","_jsx","renderStyledNewlines","NoticePost","handleInputChange","handleSubmit","useNoticePost","useNavigate","setNotice","useState","title","content","isImportant","e","name","value","type","target","newValue","postNotice","className","PiNotePencilFill","size","onClick","id","checked","onChange","htmlFor","required","placeholder"],"sourceRoot":""}