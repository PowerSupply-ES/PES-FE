{"version":3,"file":"385.8e3ee1693ebc7dd042f4.js","mappings":"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","sources":["webpack://pes-fe/./src/components/mypage/MemberFeed.tsx","webpack://pes-fe/./src/components/mypage/MemberInfo.tsx","webpack://pes-fe/./src/components/mypage/MemberProb.tsx","webpack://pes-fe/./src/components/mypage/MyFeed.tsx","webpack://pes-fe/./src/components/mypage/MyProb.tsx","webpack://pes-fe/./src/components/mypage/MyFeedList.tsx","webpack://pes-fe/./src/components/mypage/MyInfo.tsx","webpack://pes-fe/./src/components/mypage/MyProbList.tsx","webpack://pes-fe/./src/apis/mypage/getMyFeed.ts","webpack://pes-fe/./src/hooks/mypage/useMypage.ts","webpack://pes-fe/./src/apis/mypage/getMyInfo.ts","webpack://pes-fe/./src/apis/mypage/getMyProb.ts","webpack://pes-fe/./src/pages/mypage/mypage.tsx"],"sourcesContent":["import React from 'react'\r\nimport MyFeed from \"./MyFeed\";\r\nimport { MyFeedProps } from 'model/userType';\r\n\r\n// 사용자 작성 피드백 목록 컴포넌트\r\nconst MemberFeed: React.FC<MyFeedProps> = ({myFeedback, navigate}) => {\r\n  return (\r\n    <div className=\"bottom\">\r\n      <div className=\"feed_top\">\r\n        <div className=\"mypage_btn\">my feedback</div>\r\n        <div className=\"feedNum\">{myFeedback.length}개</div>\r\n      </div>\r\n\r\n      <div className=\"myFeedback\">\r\n        <MyFeed myFeedback={myFeedback} navigate={navigate}></MyFeed>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MemberFeed\r\n","import React from \"react\";\r\nimport { FaCircleUser } from \"react-icons/fa6\";\r\nimport { MemberInfoProps } from \"model/userType\";\r\nimport \"styles/css/mypage.css\";\r\nimport \"styles/css/manage.css\";\r\n\r\n// 사용자 정보 컴포넌트\r\nconst MemberInfo: React.FC<MemberInfoProps> = ({\r\n  memberName,\r\n  memberId,\r\n  memberEmail,\r\n  memberGen,\r\n  memberStatus,\r\n  memberMajor,\r\n  memberPhone\r\n}) => {\r\n  return (\r\n    <div className=\"left\">\r\n      {/* 사용자 정보 */}\r\n      <div className=\"memberInfo\">\r\n        <div className=\"info_name\">\r\n          <FaCircleUser size={40} style={{ color: \"grey\" }}></FaCircleUser>\r\n          <p>{memberName}</p>\r\n          {/* <p>님</p> */}\r\n        </div>\r\n        <div className=\"text\">\r\n          <div>학 번</div>\r\n          <p>{memberId}</p>\r\n        </div>\r\n        <div className=\"text\">\r\n          <div>이메일</div>\r\n          <p>{memberEmail}</p>\r\n        </div>\r\n        <div className=\"text\">\r\n          <div>기 수</div>\r\n          <p>{memberGen}</p>\r\n        </div>\r\n        <div className=\"text\">\r\n          <div>상 태</div>\r\n          <p>{memberStatus}</p>\r\n        </div>\r\n        <div className=\"text\">\r\n          <div>학 과</div>\r\n          <p>{memberMajor}</p>\r\n        </div>\r\n        <div className=\"text\">\r\n          <div>전화 번호</div>\r\n          <p>{memberPhone}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemberInfo;\r\n","import React from 'react'\r\nimport MyProb from './MyProb'\r\nimport { MyProbProps } from 'model/userType'\r\n\r\n\r\n// 사용자 푼 문제 목록 컴포넌트\r\nconst MemberProb: React.FC<MyProbProps> = ({ myProb, navigate }) => {\r\n  return (\r\n    <div className=\"top\">\r\n      <div className=\"prob_top\">\r\n        <div className=\"mypage_btn\">내가 푼 문제</div>\r\n        <div className=\"probNum\">{myProb.length}개</div>\r\n      </div>\r\n\r\n      <div className=\"myProblem\">\r\n        <MyProb myProb={myProb} navigate={navigate}></MyProb>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MemberProb\r\n","import React from \"react\";\r\nimport { MyFeedProps } from \"model/userType\";\r\n\r\n// 내 피드백 컴포넌트\r\nconst MyFeed: React.FC<MyFeedProps> = ({ myFeedback, navigate }) => {\r\n  const gotoFeed = (problemId: number) => {\r\n    navigate(`/question/${problemId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"FeedList\">\r\n      {myFeedback.length === 0 ? (\r\n        <div className=\"noFeed\">아직 남긴 피드백이 없어요!</div>\r\n      ) : (\r\n        myFeedback.map((it) => (\r\n          <div className=\"feeds\" key={it.answerId}>\r\n            <p className=\"problemId\">{it.answerId}</p>\r\n\r\n            <p className=\"memberGenName\">\r\n              {it.memberGen}기&nbsp;\r\n              {it.memberName}\r\n            </p>\r\n\r\n            <p className=\"commentContent\" onClick={() => gotoFeed(it.answerId)}>\r\n              {it.commentContent}\r\n            </p>\r\n\r\n            <div\r\n              className={`${\r\n                it.commentPassFail === 1\r\n                  ? \"btn_success\"\r\n                  : it.commentPassFail === 0\r\n                  ? \"btn_fail\"\r\n                  : \"btn_state\"\r\n              }`}\r\n            >\r\n              {it.commentPassFail === 1\r\n                ? \"success\"\r\n                : it.commentPassFail === 0\r\n                ? \"fail\"\r\n                : it.commentPassFail}\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyFeed;\r\n","import React from \"react\";\r\nimport { MyProbProps } from \"model/userType\";\r\n\r\n// 내가 푼 문제 컴포넌트\r\nconst MyProb: React.FC<MyProbProps> = ({ myProb, navigate }) => {\r\n  const gotoProb = (problemId: number) => {\r\n    navigate(`/question/${problemId}`);\r\n    // question/answerid\r\n  };\r\n\r\n  return (\r\n    <div className=\"problemList\">\r\n      {myProb.length === 0 ? (\r\n        <div className=\"noProblems\">아직 푼 문제가 없어요!</div>\r\n      ) : (\r\n        myProb.map((it) => (\r\n          <div className=\"problems\" key={it.answerId}>\r\n            <p className=\"problemId\">{it.problemId}</p>\r\n            <p className=\"problemTitle\" onClick={() => gotoProb(it.answerId)}>\r\n              {it.problemTitle}\r\n            </p>\r\n\r\n            <p className=\"finalScore\">{it.finalScore}점</p>\r\n            <p className=\"dash\">/</p>\r\n            <p className=\"problemScore\">{it.problemScore}점</p>\r\n\r\n            <div\r\n              className={`${\r\n                it.answerState === \"success\"\r\n                  ? \"btn_success\"\r\n                  : it.answerState === \"fail\"\r\n                  ? \"btn_fail\"\r\n                  : \"btn_state\"\r\n              }`}\r\n            >\r\n              {it.answerState === \"question\"\r\n                ? \"질문대기\"\r\n                : it.answerState === \"comment\"\r\n                ? \"피드백대기\"\r\n                : it.answerState}\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyProb;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MemberFeed from \"./MemberFeed\";\r\nimport { MyFeedback } from \"model/userType\";\r\n\r\n// MyFeedList 타입 정의\r\ninterface MyFeedListProps {\r\n  myFeedback: MyFeedback[];\r\n};\r\n\r\n// 내 피드백 list\r\nconst MyFeedList:React.FC<MyFeedListProps> = ({ myFeedback }) => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <MemberFeed myFeedback={myFeedback} navigate={navigate}/>\r\n  );\r\n};\r\n\r\nexport default MyFeedList;\r\n","import React from \"react\";\r\nimport MemberInfo from \"./MemberInfo\";\r\nimport { MemberDetail } from \"model/userType\";\r\n\r\n// MyInfo 타입 정의\r\ninterface MyInfoProps {\r\n  memberData: MemberDetail;\r\n}\r\n\r\nconst MyInfo: React.FC<MyInfoProps> = ({ memberData }) => {\r\n  return (\r\n    <MemberInfo\r\n      memberName={memberData.memberName}\r\n      memberId={memberData.memberId}\r\n      memberEmail={memberData.memberEmail}\r\n      memberGen={memberData.memberGen}\r\n      memberStatus={memberData.memberStatus}\r\n      memberMajor={memberData.memberMajor}\r\n      memberPhone={memberData.memberPhone}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MyInfo;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MemberProb from \"./MemberProb\";\r\nimport { Problem } from \"model/problemType\";\r\n\r\n// MyProbList 타입 정의\r\ninterface MyProbListProps {\r\n  myProb: Problem[]\r\n};\r\n\r\n// 내가 푼 문제 목록\r\nconst MyProbList: React.FC<MyProbListProps> = ({ myProb }) => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <MemberProb myProb={myProb} navigate={navigate}/>\r\n  );\r\n};\r\n\r\nexport default MyProbList;\r\n","import axios from \"axios\";\r\nimport { MyFeedback, SetMyFeed } from \"model/userType\";\r\n\r\n// 내 feedback GET요청\r\nconst getMyFeed = async (setMyFeedback: SetMyFeed): Promise<void> => {\r\n  const uri = \"api/mypage/myfeedback\";\r\n\r\n  try {\r\n    const response = await axios.get<MyFeedback[]>(uri);\r\n    setMyFeedback(response.data);\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {\r\n      //axios error인지 확인\r\n      // 서버가 응답을 반환했지만 상태 코드가 오류를 나타내는 경우\r\n      console.error(\r\n        \"Axios 오류 발생:\",\r\n        error.response?.status,\r\n        error.response?.statusText\r\n      );\r\n    } else if (error instanceof Error) {\r\n      //js오류인지 확인\r\n      // 요청이 서버로 전송되었지만 응답을 받지 못한 경우\r\n      console.error(\"일반 오류 발생:\", error.message);\r\n    } else {\r\n      console.error(\"알 수 없는 오류 발생:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default getMyFeed;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {getMyInfo, getMyProb, getMyFeed} from \"apis/mypage\";\r\nimport { MyFeedback, MemberDetail, UseMypageReturnType } from \"model/userType\";\r\nimport { Problem } from \"model/problemType\";\r\n\r\n// 마이페이지 api HOOK\r\nconst useMypage = (status: boolean):UseMypageReturnType => {\r\n  const navigate = useNavigate();\r\n\r\n  // 내정보\r\n  const [memberData, setMemberData] = useState<MemberDetail>();\r\n  // 내문제리스트\r\n  const [myProb, setMyProb] = useState<Problem[]>([]);\r\n  // 내피드백리스트\r\n  const [myFeedback, setMyFeedback] = useState<MyFeedback[]>([]);\r\n\r\n  // 관련 API요청 HOOK\r\n  useEffect(() => {\r\n    // 비로그인시\r\n    if (status === null || status === undefined) {\r\n      alert(\"로그인 해주세요\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n\r\n    // 로그인 상태일 때 API 요청\r\n    const fetchData = async() => {\r\n      try{\r\n        getMyInfo(setMemberData); // 내 정보 GET요청\r\n        getMyProb(setMyProb); // 내가 푼 문제 GET요청\r\n        getMyFeed(setMyFeedback); // 내 feedback GET요청\r\n      }catch(error){\r\n        console.error(\"데이터를 가져오는 중 오류 발생:\", error);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [navigate]); // navigate가 최신상태인지 확인\r\n\r\n  return { memberData, myProb, myFeedback };\r\n};\r\n\r\nexport default useMypage;\r\n","import axios from \"axios\";\r\nimport { MemberDetail, SetMyDetail } from \"model/userType\";\r\n\r\n// 내 정보 GET 요청\r\nconst getMyInfo = async (setMemberData: SetMyDetail): Promise<void> => {\r\n  const uri = \"/api/mypage/information\";\r\n\r\n  try {\r\n    const response = await axios.get<MemberDetail>(uri);\r\n    setMemberData(response.data);\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {\r\n      //axios error인지 확인\r\n      // 서버가 응답을 반환했지만 상태 코드가 오류를 나타내는 경우\r\n      console.error(\r\n        \"Axios 오류 발생:\",\r\n        error.response?.status,\r\n        error.response?.statusText\r\n      );\r\n    } else if (error instanceof Error) {\r\n      //js오류인지 확인\r\n      // 요청이 서버로 전송되었지만 응답을 받지 못한 경우\r\n      console.error(\"일반 오류 발생:\", error.message);\r\n    } else {\r\n      console.error(\"알 수 없는 오류 발생:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default getMyInfo;\r\n","import axios from \"axios\";\r\nimport { Problem } from \"model/problemType\";\r\nimport { SetMyProblem } from \"model/userType\";\r\n\r\n// 내가 푼 문제 GET요청\r\nconst getMyProb = async (setMyProb: SetMyProblem): Promise<void> => {\r\n  const uri = \"api/mypage/mysolve\";\r\n\r\n  try {\r\n    const response = await axios.get<Problem[]>(uri);\r\n    setMyProb(response.data);\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {\r\n      //axios error인지 확인\r\n      // 서버가 응답을 반환했지만 상태 코드가 오류를 나타내는 경우\r\n      console.error(\r\n        \"Axios 오류 발생:\",\r\n        error.response?.status,\r\n        error.response?.statusText\r\n      );\r\n    } else if (error instanceof Error) {\r\n      //js오류인지 확인\r\n      // 요청이 서버로 전송되었지만 응답을 받지 못한 경우\r\n      console.error(\"일반 오류 발생:\", error.message);\r\n    } else {\r\n      console.error(\"알 수 없는 오류 발생:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default getMyProb;\r\n","// 마이페이지\r\nimport React from \"react\";\r\nimport \"styles/css/App.css\";\r\nimport \"styles/css/mypage.css\";\r\nimport {MyFeedList, MyInfo, MyProbList} from \"components/mypage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useMypage from \"hooks/mypage/useMypage\";\r\nimport Loading from \"components/common/Loading\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"stores/store\"; // RootState 임포트\r\n\r\n// MyPage 컴포넌트 Props 타입\r\ninterface MyPageProps {}\r\n\r\nconst MyPage:React.FC<MyPageProps> = () => {\r\n  const navigate = useNavigate();\r\n  const { memberStatus } = useSelector((state: RootState) => state.user); // redux에서 가져오기\r\n  const { status } = useSelector((state: RootState) => state.sign);\r\n\r\n  // useMypage HOOK 호출\r\n  const { memberData, myProb, myFeedback } = useMypage(status);\r\n\r\n  if (!memberData) {\r\n    return <Loading/>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"content_mypage\">\r\n      <div className=\"mypage_content\">\r\n        {/* 왼쪽 내 정보 */}\r\n        <div className=\"left\">\r\n          <MyInfo memberData={memberData}/>\r\n          \r\n          {/* 관리자 등급이면 버튼표시 */}\r\n          {memberStatus===\"관리자\" ? (\r\n            <button className=\"btn_goto_manage\" onClick={() => navigate('/manageUser')}>관리자모드</button>\r\n            ) : (\r\n            <></>\r\n            )\r\n          }\r\n        </div>\r\n\r\n        <div className=\"right\">\r\n          {/* 내가 푼 문제 */}\r\n          <MyProbList myProb={myProb}/>\r\n\r\n          {/* 내 피드백 */}\r\n          <MyFeedList myFeedback={myFeedback}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPage;\r\n"],"names":["_ref","myFeedback","navigate","_jsxs","className","children","_jsx","length","MyFeed","memberName","memberId","memberEmail","memberGen","memberStatus","memberMajor","memberPhone","FaCircleUser","size","style","color","myProb","MyProb","map","it","answerId","onClick","gotoFeed","problemId","commentContent","commentPassFail","gotoProb","problemTitle","finalScore","problemScore","answerState","useNavigate","MemberFeed","memberData","MemberInfo","MemberProb","status","setMemberData","useState","setMyProb","setMyFeedback","useEffect","alert","async","axios","data","error","console","response","statusText","Error","message","getMyInfo","getMyProb","getMyFeed","fetchData","MyPage","useSelector","state","user","sign","useMypage","MyInfo","_Fragment","MyProbList","MyFeedList","Loading"],"sourceRoot":""}