{"version":3,"file":"167.6d78283d2afaa4385e17.js","mappings":"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","sources":["webpack://pes-fe/./src/components/sign/Copyright.tsx","webpack://pes-fe/./src/apis/sign/postSignup.ts","webpack://pes-fe/./src/hooks/sign/useSignup.ts","webpack://pes-fe/./src/components/sign/SignupTemp.tsx","webpack://pes-fe/./src/pages/sign/signUpPage.tsx"],"sourcesContent":["import { CopyrightProps } from \"model/userType\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\n// 하단 copyright\r\nconst Copyright: React.FC<CopyrightProps> = (props) => {\r\n  return (\r\n    <Typography\r\n      variant=\"body2\"\r\n      color=\"text.secondary\"\r\n      align=\"center\"\r\n      {...props}\r\n    >\r\n      {\"Goto HOME © \"}\r\n      <Link color=\"inherit\" href=\"https://pes23.com/\">\r\n        pes23.com\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Copyright;\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { SignupFormData, SignupResponseData } from \"model/userType\";\r\n\r\n\r\nconst postSignup = async (\r\n  formData: SignupFormData,\r\n  isEmailValid: (email: string) => boolean\r\n): Promise<SignupResponseData | void> => {\r\n  // 이메일 형식이 유효한지 체크\r\n  if (!isEmailValid(formData.memberEmail)) {\r\n    alert(\"이메일 형식이 아닙니다\");\r\n    return;\r\n  }\r\n\r\n  // 이름이 문자로만 입력되었는지 체크\r\n  if (!/^[a-zA-Z가-힣]+$/.test(formData.memberName)) {\r\n    alert(\"이름은 문자로 입력해주세요\");\r\n    return;\r\n  }\r\n  // TODO : 전화번호 형식이 맞는지 체크\r\n  // TODO : 아이디가 숫자로만 입력되었는지 체크\r\n\r\n  const uri = \"api/signup\";\r\n\r\n  // 회원가입 요청 api\r\n  try {\r\n    const res: AxiosResponse<SignupResponseData> = await axios.post(uri, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return res.data;\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {\r\n      // AxiosError인 경우\r\n      const axiosError = error as AxiosError;\r\n      if (axiosError.response) {\r\n        if (axiosError.response.status === 400) {\r\n          throw new Error(\"이미 사용 중인 이메일입니다.\");\r\n        }\r\n        throw new Error(`${axiosError.response.status} ${axiosError.response.statusText}`);\r\n      }\r\n    }\r\n    // AxiosError가 아닌 경우\r\n    throw new Error(\"네트워크 오류가 발생했습니다\");\r\n  }\r\n};\r\n\r\nexport default postSignup;\r\n","import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport postSignup from \"apis/sign/postSignup\";\r\nimport { SignupFormData } from \"model/userType\";\r\n\r\n// 회원가입 관련 HOOK\r\nconst useSignup = () => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState<SignupFormData>({\r\n    memberId: \"\",\r\n    memberEmail: \"\",\r\n    memberPw: \"\",\r\n    memberName: \"\",\r\n    memberGen: 0,\r\n    memberMajor: \"\",\r\n    memberPhone: \"\",\r\n  });\r\n\r\n  // 이메일 형식 검사\r\n  const isEmailValid = (email: string) => {\r\n    // 이메일이 .net 또는 .com 으로 끝나는지 확인\r\n    // some() : 하나라도 일치하면 true반환\r\n    const validEndings = [\".net\", \".com\"];\r\n    const hasValidEnding = validEndings.some((ending) => \r\n      email.endsWith(ending)\r\n    );\r\n\r\n    return hasValidEnding;\r\n  };\r\n\r\n  // 회원가입 폼이 제출될 때 호출\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();  // 기본 제출 동작 막기\r\n\r\n    try {\r\n      const responseData = await postSignup(formData, isEmailValid);\r\n      \r\n      // responseData가 undefined 아닌지 확인\r\n      if (responseData && responseData.message) {\r\n        const resultMessage = responseData.message;\r\n        alert(resultMessage);\r\n        navigate(\"/signin\");\r\n      }\r\n    } catch (error: unknown) {\r\n      if (error instanceof Error) {\r\n        alert(error.message);\r\n      } else {\r\n        alert(\"알 수 없는 오류가 발생했습니다.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  //입력필드 값 변경될때마다 호출\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({\r\n      // formData복사, 변경된 필드만 업데이트\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  return { formData, handleSubmit, handleInputChange };\r\n};\r\nexport default useSignup;\r\n","// MUI이용 회원가입 form\r\nimport React from \"react\";\r\nimport logo from \"assets/images/sign_logo.webp\";\r\nimport Copyright from \"./Copyright\";\r\nimport useSignup from \"hooks/sign/useSignup\";\r\n// import InputMask from \"react-input-mask\";\r\n\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nconst SignupTemp: React.FC = () => {\r\n  const { formData, handleSubmit, handleInputChange } = useSignup();\r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, width: 56, height: 56 }} src={logo} />\r\n\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign Up\r\n          </Typography>\r\n\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            onSubmit={handleSubmit}\r\n            sx={{ mt: 3 }}\r\n          >\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={formData.memberName}\r\n                  id=\"memberName\"\r\n                  label=\"이름\"\r\n                  name=\"memberName\"\r\n                  autoComplete=\"memberName\"\r\n                  fullWidth\r\n                  required\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"이름을 입력해주세요\"\r\n                  autoFocus\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={formData.memberEmail}\r\n                  type=\"email\"\r\n                  id=\"memberEmail\"\r\n                  label=\"이메일\"\r\n                  name=\"memberEmail\"\r\n                  autoComplete=\"memberEmail\"\r\n                  fullWidth\r\n                  required\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"이메일을 입력해주세요(@형식)\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={formData.memberId}\r\n                  id=\"memberId\"\r\n                  label=\"아이디(학번)\"\r\n                  name=\"memberId\"\r\n                  autoComplete=\"memberId\"\r\n                  fullWidth\r\n                  required\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"학번을 입력해주세요\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={formData.memberPw}\r\n                  type=\"password\"\r\n                  id=\"memberPw\"\r\n                  label=\"비밀번호\"\r\n                  name=\"memberPw\"\r\n                  autoComplete=\"memberPw\"\r\n                  fullWidth\r\n                  required\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"비밀번호를 입력해주세요\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                {/* 전화번호 형식 지정 - 호환성 문제로 삭제*/}\r\n                {/* <InputMask\r\n                  mask=\"010-9999-9999\"\r\n                  value={formData.memberPhone}\r\n                  onChange={handleInputChange}\r\n                > \r\n                  {(inputProps) => (\r\n                    <TextField\r\n                      {...inputProps}\r\n                      label=\"전화번호\"\r\n                      name=\"memberPhone\"\r\n                      autoComplete=\"tel\"\r\n                      fullWidth\r\n                      required\r\n                    />\r\n                  )}\r\n                </InputMask>\r\n                */}\r\n                <TextField\r\n                value={formData.memberPhone}\r\n                id=\"memberPhone\"\r\n                label=\"전화번호\"\r\n                name=\"memberPhone\"\r\n                autoComplete=\"tel\"\r\n                fullWidth\r\n                required\r\n                onChange={handleInputChange}\r\n                placeholder=\"전화번호를 입력해주세요\"\r\n              />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  value={formData.memberGen}\r\n                  id=\"memberGen\"\r\n                  label=\"기수\"\r\n                  name=\"memberGen\"\r\n                  autoComplete=\"memberGen\"\r\n                  fullWidth\r\n                  required\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"24년 기준 35기\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  value={formData.memberMajor}\r\n                  id=\"memberMajor\"\r\n                  label=\"학과\"\r\n                  name=\"memberMajor\"\r\n                  autoComplete=\"memberMajor\"\r\n                  required\r\n                  fullWidth\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"ex)ㅇㅇ학과\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"/signin\" variant=\"body2\">\r\n                  아이디가 있나요? 로그인\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        <Copyright sx={{ mt: 8, mb: 4 }} />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default SignupTemp;\r\n","import React from \"react\";\r\nimport \"styles/css/intro.css\";\r\nimport SignupTemp from \"components/sign/SignupTemp\";\r\n\r\nconst Signup: React.FC = () => {\r\n  return (\r\n    <div className=\"sign-wrapper2\">\r\n      <SignupTemp />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["props","_jsxs","Typography","variant","color","align","children","_jsx","Link","href","Date","getFullYear","useSignup","navigate","useNavigate","formData","setFormData","useState","memberId","memberEmail","memberPw","memberName","memberGen","memberMajor","memberPhone","isEmailValid","email","some","ending","endsWith","handleSubmit","async","e","preventDefault","responseData","test","axios","headers","data","error","axiosError","response","status","Error","statusText","alert","postSignup","message","resultMessage","handleInputChange","target","name","value","defaultTheme","createTheme","SignupTemp","ThemeProvider","theme","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","width","height","src","logo","noValidate","onSubmit","mt","Grid","container","spacing","item","xs","TextField","id","label","autoComplete","fullWidth","required","onChange","placeholder","autoFocus","type","sm","Button","mb","justifyContent","Copyright","Signup","className"],"sourceRoot":""}