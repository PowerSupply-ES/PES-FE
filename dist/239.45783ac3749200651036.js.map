{"version":3,"file":"239.45783ac3749200651036.js","mappings":"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","sources":["webpack://pes-fe/./src/apis/notice/getNoticeList.ts","webpack://pes-fe/./src/components/common/Common.tsx","webpack://pes-fe/./src/components/notice/NoticeList.tsx","webpack://pes-fe/./src/pages/notice/noticePage.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { SetNoticeList } from \"model/noticeType\";\r\n\r\n// 공지사항 리스트 get API 요청\r\nconst getNoticeList = async (setNoticeList: SetNoticeList): Promise<void> => {\r\n  const uri = \"api/notice\";\r\n\r\n  try {\r\n    const response = await axios.get(uri);\r\n\r\n    if (response.status === 204) {\r\n      console.log(\"공지사항이 아직 없습니다!\");\r\n      setNoticeList([]); // 빈 배열로 설정\r\n      return;\r\n    }\r\n    setNoticeList(response.data);\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {\r\n      //axios error인지 확인\r\n      // 서버가 응답을 반환했지만 상태 코드가 오류를 나타내는 경우\r\n      console.error(\r\n        \"Axios 오류 발생:\",\r\n        error.response?.status,\r\n        error.response?.statusText\r\n      );\r\n    } else if (error instanceof Error) {\r\n      //js오류인지 확인\r\n      // 요청이 서버로 전송되었지만 응답을 받지 못한 경우\r\n      console.error(\"일반 오류 발생:\", error.message);\r\n    } else {\r\n      console.error(\"알 수 없는 오류 발생:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default getNoticeList;\r\n","import React from \"react\";\r\n// ===== 공용 함수 지정 =====\r\n\r\n// --- Time에서 \"T\" 제거하여 표시하는 함수\r\nexport const transferTime = (time: string | null | undefined) => {\r\n  if (!time) return \"\"; // 시간이 없는 경우 처리\r\n\r\n  return time.replace(\"T\", \" \");\r\n};\r\n\r\n// --- 뒤로가기 함수\r\nexport const goBack = () => {\r\n  window.history.back();\r\n};\r\n\r\n// --- '\\n' 기준으로 줄바꿈하는 함수\r\n// React.ReactNode : JSX반환타입\r\nexport const renderNewlines = (text: string): React.ReactNode => {\r\n  return text.split(\"\\n\").map((line, index) => (\r\n    <React.Fragment key={index}>\r\n      {line}\r\n      <br />\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// --- '\\n\\n' 기준으로 줄바꿈하는 함수\r\nexport const renderStyledNewlines = (text: string): React.ReactNode => {\r\n  const lines = text.split(\"\\n\\n\"); // 각 줄을 분할\r\n  return lines.map((line, index) => {\r\n    return (\r\n      <span key={index}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    );\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { transferTime } from \"components/common/Common\";\r\nimport { NoticeListProps } from \"model/noticeType\";\r\n\r\n// 공지사항 컴포넌트\r\nconst NoticeList: React.FC<NoticeListProps> = ({ noticeList, navigate }) => {\r\n  // 해당 공지사항으로 이동 함수\r\n  const gotoNotice = (noticeId: number) => {\r\n    navigate(`/notice/${noticeId}`);\r\n  };\r\n\r\n  // TODO : 함수 말고 API로 대체하기\r\n  const isNewNotice = (createdTime: string): boolean => {\r\n    const currentTime = new Date(); //현재시간\r\n    const noticeTime = new Date(createdTime); //공지사항 생성시간\r\n    const difference = currentTime.getTime() - noticeTime.getTime(); //시간 차\r\n\r\n    // 생성시간이 하루 이내인지 확인\r\n    const oneDay = 24 * 60 * 60 * 1000; //하루의 밀리초\r\n    return Math.floor(difference / oneDay) <= 1;\r\n  };\r\n\r\n  return (\r\n    <div className=\"info_list\">\r\n      {noticeList.map((it, index) => (\r\n        <div className=\"info\" key={it.noticeId}>\r\n          <div className=\"title_0\">\r\n            {/* TODO : 중요, new 버튼 둘 중 하나 선택*/}\r\n            {it.isImportant ? (\r\n              <div className=\"imp\">중요</div>\r\n            ) : isNewNotice(it.createdTime) ? (\r\n              <div className=\"new\">new</div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          {/* 공지사항id */}\r\n          <div className=\"title_1\">{it.noticeId}</div>\r\n\r\n          {/* 제목 */}\r\n          <div className=\"title_2\" onClick={() => gotoNotice(it.noticeId)}>\r\n            {it.title}\r\n          </div>\r\n\r\n          {/* 작성날짜 */}\r\n          <div className=\"title_3\">{transferTime(it.createdTime)}</div>\r\n\r\n          {/* 조회수 */}\r\n          <div className=\"title_4\">{it.noticeHit}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoticeList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"styles/css/notice.css\";\r\nimport { HiSpeakerphone } from \"react-icons/hi\";\r\nimport { PiNotePencilFill } from \"react-icons/pi\";\r\nimport getNoticeList from \"apis/notice/getNoticeList\";\r\nimport NoticeList from \"components/notice/NoticeList\";\r\nimport { NoticeListType } from \"model/noticeType\"; \r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"stores/store\"; // RootState 임포트\r\n\r\nconst NoticePage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { memberStatus } = useSelector((state: RootState) => state.user); // redux에서 가져오기\r\n\r\n  // 공지사항 리스트\r\n  const [noticeList, setNoticeList] = useState<NoticeListType[]>([]);\r\n\r\n  useEffect(() => {\r\n    getNoticeList(setNoticeList); // 리스트 가져오기\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"info_body\">\r\n      <div className=\"content_info\">\r\n        <div className=\"header\">\r\n          <HiSpeakerphone size={30} />\r\n          <p>공지사항</p>\r\n        </div>\r\n\r\n        {/* TODO : 관리자에만 띄우기 */}\r\n        <div\r\n          className={memberStatus === \"관리자\" ? \"add_info\" : \"no_button\"}\r\n          // TODO : 등록하기 uri수정하기\r\n          onClick={() => navigate(\"/postNotice\")}\r\n        >\r\n          <PiNotePencilFill size={25} />\r\n          <p>등록하기</p>\r\n        </div>\r\n\r\n        {/* 제목 컴포넌트 */}\r\n        <div className=\"info_title\">\r\n          <div className=\"title_0\"> </div>\r\n          <div className=\"title_1\">번호</div>\r\n          <div className=\"title_2\">제목</div>\r\n          <div className=\"title_3\">작성 날짜</div>\r\n          <div className=\"title_4\">조회 수</div>\r\n        </div>\r\n\r\n        {/* 공지사항리스트 컴포넌트 */}\r\n        <NoticeList noticeList={noticeList} navigate={navigate}></NoticeList>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default NoticePage;\r\n"],"names":["async","response","axios","status","console","log","setNoticeList","data","error","statusText","Error","message","transferTime","time","replace","goBack","window","history","back","renderNewlines","text","split","map","line","index","_jsxs","React","children","_jsx","renderStyledNewlines","_ref","noticeList","navigate","isNewNotice","createdTime","currentTime","Date","noticeTime","difference","getTime","Math","floor","className","it","isImportant","noticeId","onClick","gotoNotice","title","noticeHit","NoticePage","useNavigate","memberStatus","useSelector","state","user","useState","useEffect","getNoticeList","HiSpeakerphone","size","PiNotePencilFill","NoticeList"],"sourceRoot":""}