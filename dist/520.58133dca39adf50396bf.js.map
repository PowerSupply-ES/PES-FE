{"version":3,"file":"520.58133dca39adf50396bf.js","mappings":"uIAGA,MAYA,EAZqBA,UACnB,IAIE,aAHkBC,IAAAA,IAAU,sBAAsBC,IAAa,CAC7DC,iBAAiB,KAERC,IACb,CAAE,MAAOC,GACPC,QAAQC,IAAIF,EACd,CACAC,QAAQC,IAAI,aAAcL,EAAU,C,+FCR/B,MAAMM,EAAgBC,GACtBA,EAEEA,EAAKC,QAAQ,IAAK,KAFP,GAMPC,EAASA,KACpBC,OAAOC,QAAQC,MAAM,EAKVC,EAAkBC,GACtBA,EAAKC,MAAM,MAAMC,KAAI,CAACC,EAAMC,KACjCC,EAAAA,EAAAA,MAACC,IAAAA,SAAc,CAAAC,SAAA,CACZJ,GACDK,EAAAA,EAAAA,KAAA,WAFmBJ,KAQZK,EAAwBT,GACrBA,EAAKC,MAAM,QACZC,KAAI,CAACC,EAAMC,KAEpBC,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACGJ,GACDK,EAAAA,EAAAA,KAAA,WAFSJ,I,kEC5BjB,MCqBA,EAnBwBlB,IACtB,MAAOwB,EAASC,IAAcC,EAAAA,EAAAA,UAAgC,MAExDC,GAAeC,EAAAA,EAAAA,cAAY9B,UAC/B,IACE,MAAM+B,ODPW/B,WACrB,IACE,MAAM,KAAEI,SAAeH,IAAAA,IAAU,iBAAiBC,IAAa,CAC7DC,iBAAiB,IAEnB,OAAOC,CACT,CAAE,MAAOC,GACPC,QAAQC,IAAIF,EACd,GCD2B2B,CAAe9B,GACtCyB,EAAWI,EACb,CAAE,MAAO1B,GACPC,QAAQD,MAAMA,EAChB,IACC,CAACH,IAMJ,OAJA+B,EAAAA,EAAAA,YAAU,KACRJ,GAAc,GACb,CAACA,IAEGH,CAAO,E,4BClBhB,MC0CA,EAxCuBxB,IACrB,MAAMgC,GAAWC,EAAAA,EAAAA,MACXnB,GAAOoB,EAAAA,EAAAA,QAAe,KACrBC,EAAQC,IAAaV,EAAAA,EAAAA,UAAwB,MAkCpD,MAAO,CAAES,SAAQE,YA/BjB,SAAqBC,GACnBxB,EAAKyB,QAAUD,CACjB,EA6B8BE,WA3BX1C,UACjB,GAAKgB,EAAKyB,QAEH,CACL,MAAQrC,KAAM2B,EAAQ,OAAEY,QDhBP3C,OAAO4C,EAAiB1C,KAC7C,IACE,MAAM6B,QAAiB9B,IAAAA,KAAW,gBAAgBC,IAAa,CAC7D2C,KAAMD,EACN1C,UAAWA,IAEb,MAAO,CAAEE,KAAM2B,EAAS3B,KAAMuC,OAAQZ,EAASY,OACjD,CAAE,MAAOtC,GAIP,OAHAC,QAAQC,IAAIF,GAGRJ,IAAAA,aAAmBI,GACd,CAAEsC,OAAQtC,EAAM0B,SAAW1B,EAAM0B,SAASY,OAAS,KAGnD,CAAEA,OAAQ,IAErB,GCD6CG,CACvC9B,EAAKyB,QACLvC,GAGG6B,EAEiB,MAAXY,GACTrC,QAAQC,IAAIwB,GACZgB,MAAM,+BACNC,eAAeC,QAAQ,YAAa/C,EAAUgD,YAC9ChB,EAAS,aAAaH,EAASoB,cACX,MAAXR,GACTL,EAAUP,EAASM,QACnBU,MAAM,yBACc,MAAXJ,GACTI,MACE,yCAAyChB,EAASqB,WAXpDL,MAAM,MAcV,MAtBEA,MAAM,cAsBR,EAGwC,E,cCnC5C,MAkBA,EAlBqB7C,IACnB,MAAMmD,ECHcnD,KACpB,MAAOmD,EAAOC,IAAY1B,EAAAA,EAAAA,UAA8B,MAGlD2B,GAAazB,EAAAA,EAAAA,cAAY9B,UAC7B,IACE,MAAMwD,QAAkBC,EAAAA,EAAAA,GAAavD,GAEnCoD,EADEE,GAGO,KAEb,CAAE,MAAOnD,GACPC,QAAQD,MAAMA,GACdiD,EAAS,KACX,IACC,CAACpD,IAMJ,OAJA+B,EAAAA,EAAAA,YAAU,KACRsB,GAAY,GACX,CAACA,IAEGF,CAAK,EDnBEK,CAAaxD,GACrBwB,EAAUiC,EAAezD,IACzB,YAAEqC,EAAW,WAAEG,EAAU,OAAEL,GAAWuB,EAAc1D,IACpD,OAAEyC,IAAWkB,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,OAI3D,MAAO,CACLV,QACA3B,UACAW,SACA2B,QANcrB,EAOdJ,cACAG,aACD,C,sHEjBH,MAAMuB,EAAa3C,IAAAA,MAAW,IAAM,wDA6HpC,EA3H8B4C,KAC5B,IAAIC,EAAM,IAAIC,IAAIxD,OAAOyD,SAASC,MAC9BpE,EAAYqE,OAAOJ,EAAIK,SAASvD,MAAM,KAAK,IAG/C,MAAM,MAAEoC,EAAK,QAAE3B,EAAO,OAAEW,EAAM,QAAE2B,EAAO,YAAEzB,EAAW,WAAEG,IACpD+B,EAAAA,EAAAA,GAAYvE,GA8Gd,OACEsB,EAAAA,EAAAA,KAAA,OAAAD,SACG8B,GAAS3B,GA1GVL,EAAAA,EAAAA,MAACqD,EAAAA,EAAa,CAACZ,MAAO,OAAOvC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,iBAAgBpD,UAC7BF,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,gBAAepD,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,aAAYpD,SAAA,CAAC,KAAGrB,MAC/BsB,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,eAAcpD,SAAE8B,GAAOuB,gBACtCpD,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,sBAAqBpD,SAAC,cAIzCF,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,kBAAiBpD,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBpD,SAAA,EAEhCF,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,MAAME,MAAO,CAAEC,WAAY,OAAQvD,SAAA,EAChDC,EAAAA,EAAAA,KAAA,KAAGmD,UAAU,YAAWpD,SAAC,QACzBC,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,YAAWpD,SAEvBG,GAASqD,iBACRhE,EAAAA,EAAAA,IAAeW,EAAQqD,sBAK7B1D,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,SAAQpD,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,gBAAgBE,MAAO,CAAEC,WAAY,OAAQvD,SAAA,EAC1DC,EAAAA,EAAAA,KAAA,KAAGmD,UAAU,YAAWpD,SAAC,mBACzBC,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,aAAYpD,SACxBG,GAASsD,cACRtD,EAAQsD,aAAa9D,KAAI,CAAC+D,EAAO7D,KAC/BI,EAAAA,EAAAA,KAACF,IAAAA,SAAc,CAAAC,UAEZE,EAAAA,EAAAA,IAAqBwD,IAFH7D,WAQ7BC,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,iBAAiBE,MAAO,CAAEC,WAAY,OAAQvD,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,KAAGmD,UAAU,YAAWpD,SAAC,oBACzBC,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,cAAapD,SACzBG,GAASwD,eACRxD,EAAQwD,cAAchE,KAAI,CAACiE,EAAQ/D,KACjCI,EAAAA,EAAAA,KAACF,IAAAA,SAAc,CAAAC,UACZE,EAAAA,EAAAA,IAAqB0D,IADH/D,iBAUjCI,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,eAAcpD,SAC1ByC,GACC3C,EAAAA,EAAAA,MAAA+D,EAAAA,SAAA,CAAA7D,SAAA,EAEEC,EAAAA,EAAAA,KAAC6D,EAAAA,SAAQ,CAACC,UAAU9D,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,IAAGhE,UAC7BC,EAAAA,EAAAA,KAACyC,EAAU,CACTpB,KAAM,GACN2C,SAAUjD,EACVkD,UAAU,MAIbpD,UACChB,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,mBAAkBpD,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAKmD,UAAU,iBAAgBpD,SAAEc,WAKvCb,EAAAA,EAAAA,KAAA,YACEkE,UAAQ,EACRf,UAAU,aACVgB,YAAY,wBAMpBnE,EAAAA,EAAAA,KAAA,UACEmD,UAAWX,EAAU,gBAAkB,yBACvC4B,QAASA,KAMD5B,GAEApD,OAAOiF,QAAQ,6BAEfnD,GAEJ,EAEHnB,SACF,WASkCC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,KACzC,C,kCC3HH,MAAMb,E,QAAgBoB,GAAOC,GAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqDhCC,GAAyB,YAAhBA,EAAMlC,MAAsB,UAA4B,SAAhBkC,EAAMlC,MAAmB,yBAA2B;;;+BAG1FkC,GAAyB,YAAhBA,EAAMlC,MAAsB,UACtC,SAAhBkC,EAAMlC,MAAmB,yBACzB;4BACckC,GAAyB,YAAhBA,EAAMlC,MAAsB,0BACvC,SAAhBkC,EAAMlC,MAAmB,wBACzB;;iBAEOkC,GAAyB,YAAhBA,EAAMlC,MAAsB,0BACxB,SAAhBkC,EAAMlC,MAAmB,wBACzB;4BACckC,GAAyB,YAAhBA,EAAMlC,MAAsB,0BACnC,SAAhBkC,EAAMlC,MAAmB,wBACzB","sources":["webpack://pes-fe/./src/apis/problem/getProbTitle.ts","webpack://pes-fe/./src/components/common/Common.tsx","webpack://pes-fe/./src/apis/problem/getProbContent.ts","webpack://pes-fe/./src/hooks/problem/useProbContent.ts","webpack://pes-fe/./src/apis/problem/postSubmitCode.ts","webpack://pes-fe/./src/hooks/problem/useSubmitCode.ts","webpack://pes-fe/./src/hooks/problem/useProbPage.ts","webpack://pes-fe/./src/hooks/problem/useProbTitle.ts","webpack://pes-fe/./src/pages/problem/problemPage.tsx","webpack://pes-fe/./src/styles/styledComponent/Problem-styled.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// 문제 제목 get 요청\r\nconst getProbTitle = async (problemId: number) => {\r\n  try {\r\n    const res = await axios.get(`/api2/problemtitle/${problemId}`, {\r\n      withCredentials: true,\r\n    });\r\n    return res.data;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n  }\r\n  console.log(\"problemId:\", problemId);\r\n};\r\n\r\nexport default getProbTitle;\r\n","import React from \"react\";\r\n// ===== 공용 함수 지정 =====\r\n\r\n// --- Time에서 \"T\" 제거하여 표시하는 함수\r\nexport const transferTime = (time: string | null | undefined) => {\r\n  if (!time) return \"\"; // 시간이 없는 경우 처리\r\n\r\n  return time.replace(\"T\", \" \");\r\n};\r\n\r\n// --- 뒤로가기 함수\r\nexport const goBack = () => {\r\n  window.history.back();\r\n};\r\n\r\n// --- '\\n' 기준으로 줄바꿈하는 함수\r\n// React.ReactNode : JSX반환타입\r\nexport const renderNewlines = (text: string): React.ReactNode => {\r\n  return text.split(\"\\n\").map((line, index) => (\r\n    <React.Fragment key={index}>\r\n      {line}\r\n      <br />\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// --- '\\n\\n' 기준으로 줄바꿈하는 함수\r\nexport const renderStyledNewlines = (text: string): React.ReactNode => {\r\n  const lines = text.split(\"\\n\\n\"); // 각 줄을 분할\r\n  return lines.map((line, index) => {\r\n    return (\r\n      <span key={index}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    );\r\n  });\r\n};\r\n","import axios from \"axios\";\r\n\r\n// 문제 내용 get 요청\r\nconst getProbContent = async (problemId: number) => {\r\n  try {\r\n    const { data } = await axios.get(`/api2/problem/${problemId}`, {\r\n      withCredentials: true,\r\n    });\r\n    return data;\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default getProbContent;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport getProbContent from \"apis/problem/getProbContent\";\r\nimport { ProblemContent } from \"model/problemType\";\r\n\r\n// 문제 내용 get HOOK\r\nconst useProbContent = (problemId: number): ProblemContent | null => {\r\n  const [problem, setProblem] = useState<ProblemContent | null>(null);\r\n\r\n  const fetchProblem = useCallback(async () => {\r\n    try {\r\n      const response = await getProbContent(problemId);\r\n      setProblem(response);\r\n    } catch (error: unknown) {\r\n      console.error(error);\r\n    }\r\n  }, [problemId]);\r\n\r\n  useEffect(() => {\r\n    fetchProblem();\r\n  }, [fetchProblem]);\r\n\r\n  return problem;\r\n};\r\n\r\nexport default useProbContent;\r\n","import axios from \"axios\";\r\n\r\n// 코드 제출 post 요청\r\nconst postSubmitCode = async (request: string, problemId: number) => {\r\n  try {\r\n    const response = await axios.post(`/api2/submit/${problemId}`, {\r\n      code: request,\r\n      problemId: problemId,\r\n    });\r\n    return { data: response.data, status: response.status };\r\n  } catch (error: unknown) {\r\n    console.log(error);\r\n\r\n    // error가 AxiosError인지 확인\r\n    if (axios.isAxiosError(error)) {\r\n      return { status: error.response ? error.response.status : 500 };\r\n    } else {\r\n      // 예상하지 못한 다른 에러의 경우\r\n      return { status: 500 };\r\n    }\r\n  }\r\n};\r\n\r\nexport default postSubmitCode;\r\n","import { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport postSubmitCode from \"apis/problem/postSubmitCode\";\r\n\r\n// 문제 post 요청\r\nconst useSubmitCode = (problemId: number) => {\r\n  const navigate = useNavigate();\r\n  const text = useRef<string>(\"\"); // 코드 입력을 위한 useRef\r\n  const [detail, setDetail] = useState<string | null>(null); // 틀린 이유 저장하는 state\r\n\r\n  // 수정코드_by성임\r\n  function textHandler(newCode: string) {\r\n    text.current = newCode;\r\n  }\r\n\r\n  const submitCode = async () => {\r\n    if (!text.current) {\r\n      alert(\"코드를 입력해주세요!\");\r\n    } else {\r\n      const { data: response, status } = await postSubmitCode(\r\n        text.current,\r\n        problemId\r\n      );\r\n\r\n      if (!response) {\r\n        alert(\"오류!\");\r\n      } else if (status === 201) {\r\n        console.log(response);\r\n        alert(\"문제를 맞혔습니다! 질의응답 페이지로 이동합니다.\");\r\n        sessionStorage.setItem(\"problemId\", problemId.toString());\r\n        navigate(`/question/${response.answer_id}`);\r\n      } else if (status === 202) {\r\n        setDetail(response.detail);\r\n        alert(\"문제를 틀렸습니다! 다시 풀어보세요.\");\r\n      } else if (status === 500) {\r\n        alert(\r\n          `server가 응답하지 않네요! 관리자에게 상황을 공유해주세요! : ${response.message}`\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return { detail, textHandler, submitCode };\r\n};\r\n\r\nexport default useSubmitCode;\r\n","// 문제 관련 HOOK 반환타입\r\nimport {useProbContent, useProbTitle, useSubmitCode} from \"./index\";\r\nimport { UseProbPageReturnType } from \"model/problemType\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"stores/store\";\r\n\r\n// 문제 관련 HOOK 관리 - ProblemPage에 사용\r\nconst useProbPage = (problemId: number): UseProbPageReturnType => {\r\n  const title = useProbTitle(problemId); // 문제 제목 get HOOK\r\n  const problem = useProbContent(problemId); // 문제 내용 get HOOK\r\n  const { textHandler, submitCode, detail } = useSubmitCode(problemId); // 문제 post 요청\r\n  const { status } = useSelector((state: RootState) => state.sign); // redux에서 가져오기\r\n\r\n  const isLogin = status;\r\n\r\n  return {\r\n    title,\r\n    problem,\r\n    detail,\r\n    isLogin,\r\n    textHandler,\r\n    submitCode\r\n  };\r\n};\r\n\r\nexport default useProbPage;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport getProbTitle from \"apis/problem/getProbTitle\";\r\nimport { ProblemTitle } from \"model/problemType\";\r\n\r\n// 문제 제목 get HOOK\r\nconst useProbTitle = (problemId: number): ProblemTitle | null => {\r\n  const [title, setTitle] = useState<ProblemTitle | null>(null);\r\n\r\n  // problemId가 변경되지 않는 한, 동일한 함수로 재사용\r\n  const fetchTitle = useCallback(async () => {\r\n    try {\r\n      const titleData = await getProbTitle(problemId);\r\n      if (titleData) {\r\n        setTitle(titleData); // titleData가 존재할 때만 state 업데이트\r\n      } else {\r\n        setTitle(null);\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error(error);\r\n      setTitle(null);\r\n    }\r\n  }, [problemId]);\r\n\r\n  useEffect(() => {\r\n    fetchTitle();\r\n  }, [fetchTitle]);\r\n\r\n  return title;\r\n};\r\n\r\nexport default useProbTitle;\r\n","import React, { Suspense } from \"react\";\r\nimport { StyledProblem } from \"styles/styledComponent/Problem-styled\";\r\nimport useProbPage from \"hooks/problem/useProbPage\";\r\nimport { renderNewlines, renderStyledNewlines } from \"components/common/Common\";\r\nimport Loading from \"components/common/Loading\";\r\nconst CodeEditor = React.lazy(() => import(\"components/problem/CodeEditor\"));\r\n\r\nconst ProblemPage: React.FC = () => {\r\n  let url = new URL(window.location.href);\r\n  let problemId = Number(url.pathname.split(\"/\")[2]); // 문자열을 숫자로 변환\r\n\r\n  // 관련 HOOK 호출\r\n  const { title, problem, detail, isLogin, textHandler, submitCode } =\r\n    useProbPage(problemId);\r\n\r\n  // 문제 UI 렌더링 함수\r\n  const renderProbUI = () => {\r\n\r\n    return (\r\n      <StyledProblem state={\"null\"}>\r\n        <div className=\"problem_header\">\r\n          <div className=\"problem_group\">\r\n            <div className=\"problem_id\">문제{problemId}</div>\r\n            <div className=\"header_title\">{title?.problemTitle}</div>\r\n            <div className=\"header_answer_state\">미완료</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"problem_section\">\r\n          <div className=\"content_container\">\r\n            {/* 상단문제 */}\r\n            <div className=\"top\" style={{ whiteSpace: \"pre\" }}>\r\n              <p className=\"underline\">문제</p>\r\n              <div className=\"prob_text\">\r\n                {/* renderNewlines : '\\n' 기준으로 줄바꿈 함수 */}\r\n                {problem?.problemContent &&\r\n                  renderNewlines(problem.problemContent)}\r\n              </div>\r\n            </div>\r\n\r\n            {/* 하단 sample input */}\r\n            <div className=\"bottom\">\r\n              <div className=\"sample_inputs\" style={{ whiteSpace: \"pre\" }}>\r\n                <p className=\"underline\">Sample Inputs</p>\r\n                <div className=\"input_text\">\r\n                  {problem?.sampleInputs &&\r\n                    problem.sampleInputs.map((input, index) => (\r\n                      <React.Fragment key={index}>\r\n                        {/* renderStyledNewlines : '\\n\\n' 기준으로 줄바꿈 함수 */}\r\n                        {renderStyledNewlines(input)}\r\n                      </React.Fragment>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sample_outputs\" style={{ whiteSpace: \"pre\" }}>\r\n                <p className=\"underline\">Sample Outputs</p>\r\n                <div className=\"output_text\">\r\n                  {problem?.sampleOutputs &&\r\n                    problem.sampleOutputs.map((output, index) => (\r\n                      <React.Fragment key={index}>\r\n                        {renderStyledNewlines(output)}\r\n                      </React.Fragment>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 우측 코드 입력 */}\r\n          <div className=\"code_section\">\r\n            {isLogin ? (\r\n              <>\r\n                {/* 변경코드 by성임 - Lazy Loading 적용 */}\r\n                <Suspense fallback={<Loading/>}>\r\n                  <CodeEditor\r\n                    code={\"\"} // 현재 코드 상태\r\n                    onChange={textHandler} // 코드 변경 핸들러\r\n                    readOnly={false} // 읽기 전용 여부\r\n                  />\r\n                </Suspense>\r\n\r\n                {detail !== null && detail !== undefined && (\r\n                  <div className=\"detail_container\">\r\n                    <h3>틀린 이유</h3>\r\n                    <div className=\"detail_content\">{detail}</div>\r\n                  </div>\r\n                )}\r\n              </>\r\n            ) : (\r\n              <textarea\r\n                disabled\r\n                className=\"code_input\"\r\n                placeholder=\"로그인 후 이용해주세요.\"\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          className={isLogin ? \"submit_button\" : \"submit_button disabled\"}\r\n          onClick={() =>\r\n            //기존코드\r\n            //isLogin && submitCode()\r\n\r\n            //수정코드 by성임\r\n            {\r\n              if (isLogin) {\r\n                if (\r\n                  window.confirm(\"수정이 불가능합니다. 정말 제출하시겠습니까?\")\r\n                ) {\r\n                  submitCode();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        >\r\n          제출\r\n        </button>\r\n      </StyledProblem>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {title && problem ? renderProbUI() : <Loading/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","import styled from \"styled-components\";\r\nimport { StyledProps } from \"model/problemType\"; \r\n\r\nexport const StyledProblem = styled.div<StyledProps>`\r\n    .problem_header {\r\n        width: 80%;\r\n        height: 78px;\r\n        display: flex;\r\n        align-items: center;\r\n        margin-top: 40px;\r\n        margin-bottom: 16px;\r\n        position: relative;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        justify-content: space-between;\r\n    }\r\n    .button_group{\r\n        width: 80%;\r\n        margin: 0 auto 32px;\r\n        justify-content: right;\r\n    }\r\n    .problem_group {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    .problem_id {\r\n        width: 80px;\r\n        height: fit-content;\r\n        font-size: 19px;\r\n\r\n        padding: 8px 0;\r\n        font-weight: bold;\r\n        // background-color: #ffffff;\r\n        background-color:#3B3B3B;\r\n        color : #ffffff;\r\n        border:solid 3px #3B3B3B; opacity:80%;\r\n        border-radius : 50px;\r\n        text-align: center;\r\n        margin-right: 20px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n    }\r\n    .header_title {\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        text-align: left;\r\n        margin-right: 8px;\r\n    }\r\n    .header_score {\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        text-align: left;\r\n        margin-left: 20px;\r\n    }\r\n    .header_answer_state {\r\n        width: fit-content;\r\n        padding: 8px 16px;\r\n        // color: ${props => props.state === \"success\" ? \"#5094F9\" : props.state === \"fail\" ? \"rgba(235, 52, 52, 0.8)\" : \"#6A6B6F\"};\r\n        // background-color: #ffffff;\r\n\r\n        /* border: solid 3px ${props => props.state === \"success\" ? \"#5094F9\" \r\n            : props.state === \"fail\" ? \"rgba(235, 52, 52, 0.8)\" \r\n            : \"#DEDEDE\"};\r\n        background-color: ${props => props.state === \"success\" ? \"#0025cae0; opacity:70%;\"\r\n        : props.state === \"fail\" ? \"rgb(255, 53, 53, 0.9)\" \r\n        : \"#3B3B3B; opacity:70%\"}; */\r\n        \r\n        color: ${props => props.state === \"success\" ? \"#0025cae0; opacity:70%;\" \r\n            : props.state === \"fail\" ? \"rgb(255, 53, 53, 0.9)\" \r\n            : \"#3B3B3B; opacity:70%\"};\r\n        border: solid 3px ${props => props.state === \"success\" ? \"#0025cae0; opacity:70%;\"\r\n            : props.state === \"fail\" ? \"rgb(246, 73, 73, 0.9)\" \r\n            : \"#3B3B3B; opacity:70%\"};\r\n\r\n        font-size: 19px;\r\n        font-weight: bold;\r\n        margin-right: 10px;\r\n        border-radius : 50px;\r\n        box-sizing: border-box;\r\n        box-shadow: 1px 2px #CCC9C9;\r\n    }\r\n    .description {\r\n        width: 1376px;\r\n        font-size: 20px;\r\n        align-items: center;\r\n        margin: auto;\r\n        background-color: beige;\r\n        text-align: left;\r\n    }\r\n\r\n    .problem_section{\r\n        width:80%;\r\n        height:100vh;\r\n        margin: 60px auto 0;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-bottom:20px;\r\n    }\r\n\r\n    &.problem_header_section {\r\n        z-index: 998;\r\n        position: relative;\r\n    }\r\n\r\n    .code_section{\r\n        flex: 5;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        margin: auto 0;\r\n        height:100%;\r\n    }\r\n\r\n    .content_container {\r\n        width: 40%;\r\n        height: auto;\r\n        justify-content: center;\r\n        flex: 4;\r\n\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-right: 60px;\r\n        // background-color: #ffffff;\r\n        // border-radius : 20px;\r\n        // box-shadow: 1px 3px #CCC9C9;\r\n        //   overflow-y: auto;\r\n\r\n    }\r\n    .content_container > .top,\r\n    .content_container > .bottom{\r\n        background-color: #ffffff;\r\n        border-radius : 20px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n        overflow-y: auto;\r\n        padding:12px;\r\n        width: 100%;\r\n\r\n        min-height: 240px;\r\n    }\r\n\r\n    // 스크롤바 디자인\r\n    ::-webkit-scrollbar {\r\n    width: 10px;  \r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n    background: #c0c0c0; /* 스크롤바 색상 */\r\n    border-radius: 10px; /* 스크롤바 둥근 테두리 */\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n    background: #e7e6f696;  /*스크롤바 뒷 배경 색상*/\r\n    }\r\n\r\n    .content_container > .top{\r\n\r\n        text-align: left;\r\n        margin: 0 auto 4px;\r\n        border-bottom: solid 1px;\r\n        height: 45%;\r\n    }\r\n    .content_container > .bottom{\r\n        height: 55%;\r\n\r\n    }\r\n    .content_container > .bottom > .sample_inputs {\r\n        width: 90%;\r\n        display:flex;\r\n        flex-direction:column;\r\n        align-items: start;\r\n\r\n        text-align: left;\r\n        margin: auto;\r\n    }\r\n    .underline\r\n    {\r\n        font-size:18px;\r\n        text-decoration:underline;\r\n        text-underline-offset : 6px;\r\n        text-decoration-color: #5094F9; opacity:70%;\r\n\r\n        color:#000000;\r\n     \r\n        font-size: 19px;\r\n        // font-weight: bold;\r\n        margin-bottom: 12px;\r\n    }\r\n    .top > .prob_text{\r\n        font-weight:bold;\r\n    }\r\n    .sample_inputs > .input_text{\r\n        font-weight:bold;\r\n    }\r\n    .sample_outputs > .output_text{\r\n        font-weight:bold;\r\n    }\r\n\r\n    // input요소들 중 순서에 따라 색깔 부여\r\n    .input_text > *:nth-child(1),\r\n    .output_text > *:nth-child(1){\r\n        color: rgb(124, 124, 124);\r\n    }\r\n    .input_text > *:nth-child(2n),\r\n    .output_text > *:nth-child(2n){\r\n        color: #a1a1ff;\r\n    }\r\n    .input_text > *:nth-child(3n),\r\n    .output_text > *:nth-child(3n){\r\n        color: #d783ff;\r\n    }\r\n\r\n    .content_container > .bottom > .sample_outputs {\r\n        width: 90%;\r\n        text-align: left;\r\n        margin: auto;\r\n    }\r\n    .sample_outputs > .underline{\r\n        margin-top:40px;\r\n    }\r\n\r\n\r\n    .code_input {\r\n        width: 100%;\r\n        height: 100%;\r\n        min-height: 564px;\r\n        font-size: 18px;\r\n        // color: #ffffff;\r\n        display: flex;\r\n        justify-content: center;\r\n        background-color: #3e3e3e;\r\n        overflow-y: auto;\r\n\r\n        border-radius : 20px;\r\n        padding: 16px 8px 0 12px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n        box-sizing: border-box;\r\n    }\r\n    .submit_button {\r\n        width: fit-content;\r\n        height: fit-content;\r\n        background-color: #9747FF;\r\n        color: white;\r\n        font-size: 20px;\r\n        border-radius: 5px;\r\n        border: none;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin: 80px auto 40px;\r\n        padding: 4px 36px;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n    }\r\n    .submit_button.disabled {\r\n        background-color: #dedede;\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    .code_container {\r\n        width: 1376px;\r\n        height: auto;\r\n        display: flex;\r\n        align-items: center;\r\n        margin: auto;\r\n        border-radius: 5px;\r\n        background-color: beige;\r\n        font-size: 20px;\r\n        white-space: pre-line; \r\n    }\r\n   \r\n    .title {\r\n        width: fit-content;\r\n        display: flex;\r\n        font-size: 24px;\r\n        font-weight: bold;\r\n        margin: 0 auto;\r\n        margin-top: 20px;\r\n        margin-bottom: 10px;\r\n    }\r\n    .result_container {\r\n        width: 1376px;\r\n    height: auto;\r\n    background-color: #eee;\r\n    margin: 0 auto;\r\n    margin-bottom: 20px;\r\n    font-size: 20px;\r\n    white-space: pre-line; \r\n    text-align: left;\r\n    }\r\n    .loading {\r\n        height: 1500px\r\n    }\r\n    .detail_container {\r\n        width: 100%;\r\n        height: auto;\r\n        justify-content: center;\r\n        text-align: left;\r\n        margin-top: 40px;\r\n    }\r\n    .detail_content {\r\n        min-height: 150px;\r\n        text-align: left;\r\n        padding: 16px 8px 0 12px;\r\n        box-shadow: 1px 3px #CCC9C9;\r\n        box-sizing: border-box;\r\n        background-color: rgba(109, 99, 228, 0.3);\r\n        font-size: 20px;\r\n        border-radius: 15px;\r\n    }\r\n`;"],"names":["async","axios","problemId","withCredentials","data","error","console","log","transferTime","time","replace","goBack","window","history","back","renderNewlines","text","split","map","line","index","_jsxs","React","children","_jsx","renderStyledNewlines","problem","setProblem","useState","fetchProblem","useCallback","response","getProbContent","useEffect","navigate","useNavigate","useRef","detail","setDetail","textHandler","newCode","current","submitCode","status","request","code","postSubmitCode","alert","sessionStorage","setItem","toString","answer_id","message","title","setTitle","fetchTitle","titleData","getProbTitle","useProbTitle","useProbContent","useSubmitCode","useSelector","state","sign","isLogin","CodeEditor","ProblemPage","url","URL","location","href","Number","pathname","useProbPage","StyledProblem","className","problemTitle","style","whiteSpace","problemContent","sampleInputs","input","sampleOutputs","output","_Fragment","Suspense","fallback","Loading","onChange","readOnly","disabled","placeholder","onClick","confirm","styled","div","props"],"sourceRoot":""}