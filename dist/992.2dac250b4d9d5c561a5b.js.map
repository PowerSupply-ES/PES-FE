{"version":3,"file":"992.2dac250b4d9d5c561a5b.js","mappings":"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","sources":["webpack://pes-fe/./src/apis/notice/getNoticeList.ts","webpack://pes-fe/./src/apis/notice/postNotice.ts","webpack://pes-fe/./src/components/common/Common.tsx","webpack://pes-fe/./src/hooks/notice/useNoticeDetail.ts","webpack://pes-fe/./src/apis/notice/getNoticeDetail.ts","webpack://pes-fe/./src/pages/notice/noticeDetailPage.tsx","webpack://pes-fe/./src/apis/notice/fetchNotice.ts","webpack://pes-fe/./src/apis/notice/delNotice.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { SetNoticeList } from \"model/noticeType\";\r\n\r\n// 공지사항 리스트 get API 요청\r\nconst getNoticeList = async (setNoticeList: SetNoticeList): Promise<void> => {\r\n  const uri = \"api/notice\";\r\n\r\n  try {\r\n    const response = await axios.get(uri);\r\n\r\n    if (response.status === 204) {\r\n      console.log(\"공지사항이 아직 없습니다!\");\r\n      setNoticeList([]); // 빈 배열로 설정\r\n      return;\r\n    }\r\n    setNoticeList(response.data);\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {\r\n      //axios error인지 확인\r\n      // 서버가 응답을 반환했지만 상태 코드가 오류를 나타내는 경우\r\n      console.error(\r\n        \"Axios 오류 발생:\",\r\n        error.response?.status,\r\n        error.response?.statusText\r\n      );\r\n    } else if (error instanceof Error) {\r\n      //js오류인지 확인\r\n      // 요청이 서버로 전송되었지만 응답을 받지 못한 경우\r\n      console.error(\"일반 오류 발생:\", error.message);\r\n    } else {\r\n      console.error(\"알 수 없는 오류 발생:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default getNoticeList;\r\n","import axios from \"axios\";\r\nimport { PostNoticeType } from \"model/noticeType\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\n\r\n// 공지사항 post API 호출\r\nconst postNotice = async (notice: PostNoticeType, navigate:NavigateFunction) => {\r\n  const uri = \"api/notice\";\r\n\r\n  try {\r\n    const response = await axios.post(uri, notice, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (response.status === 201) {\r\n      alert(\"공지사항이 성공적으로 등록되었습니다!\");\r\n      navigate(\"/notice\");\r\n    }\r\n  } catch (error: unknown) {\r\n    // axios에서 발생한 오류인 경우\r\n    if (axios.isAxiosError(error)) {\r\n      if (error.response) {\r\n        // 서버가 응답을 반환한 경우\r\n        if (error.response.status === 403) {\r\n          alert(\"권한이 없습니다\");\r\n        } else {\r\n          alert(\r\n            `서버 응답 오류: ${error.response.status} ${error.response.statusText}`\r\n          );\r\n        }\r\n      } else if (error.request) {\r\n        // 요청이 이루어졌으나 응답이 없는 경우\r\n        alert(\"서버 응답이 없습니다.\");\r\n      } else {\r\n        // 설정 중 오류 발생\r\n        alert(`요청 실패: ${error.message}`);\r\n      }\r\n    }\r\n    else { // axios와 무관한 오류인 경우\r\n      alert(`알 수 없는 오류 발생: ${(error as Error).message}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport default postNotice;\r\n","import React from \"react\";\r\n// ===== 공용 함수 지정 =====\r\n\r\n// --- Time에서 \"T\" 제거하여 표시하는 함수\r\nexport const transferTime = (time: string | null | undefined) => {\r\n  if (!time) return \"\"; // 시간이 없는 경우 처리\r\n\r\n  return time.replace(\"T\", \" \");\r\n};\r\n\r\n// --- 뒤로가기 함수\r\nexport const goBack = () => {\r\n  window.history.back();\r\n};\r\n\r\n// --- '\\n' 기준으로 줄바꿈하는 함수\r\n// React.ReactNode : JSX반환타입\r\nexport const renderNewlines = (text: string): React.ReactNode => {\r\n  return text.split(\"\\n\").map((line, index) => (\r\n    <React.Fragment key={index}>\r\n      {line}\r\n      <br />\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// --- '\\n\\n' 기준으로 줄바꿈하는 함수\r\nexport const renderStyledNewlines = (text: string): React.ReactNode => {\r\n  const lines = text.split(\"\\n\\n\"); // 각 줄을 분할\r\n  return lines.map((line, index) => {\r\n    return (\r\n      <span key={index}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    );\r\n  });\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport getNoticeDetail from \"apis/notice/getNoticeDetail\";\r\nimport { NoticeDetailType } from \"model/noticeType\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"stores/store\";\r\n\r\n// user 세부정보 호출 HOOK\r\nconst useNoticeDetail = () => {\r\n  const { memberStatus } : { memberStatus: string | null} = useSelector((state: RootState) => state.user); // redux에서 가져오기\r\n  const [noticeDetail, setDetail] = useState<NoticeDetailType | null>(null); //공지사항 세부정보\r\n  const [isEditing, setIsEditing] = useState<boolean>(false); //수정상태\r\n\r\n  let url = new URL(window.location.href);\r\n  let noticeId: number = parseInt(url.pathname.split(\"/\")[2]); // number 타입으로 넘기기위해 int로 변환\r\n\r\n  const uri = \"/api/notice/\";\r\n\r\n  useEffect(() => {\r\n    getNoticeDetail(setDetail, noticeId, uri); // 공지사항 detail API요청\r\n  }, [noticeId]);\r\n\r\n  // 공지사항 수정 상태 관리\r\n  const toggleEditing = () => {\r\n    setIsEditing((prevState) => !prevState);\r\n  };\r\n\r\n  return {\r\n    memberStatus,\r\n    noticeDetail,\r\n    isEditing,\r\n    toggleEditing,\r\n    setDetail,\r\n    uri,\r\n    noticeId,\r\n  };\r\n};\r\n\r\nexport default useNoticeDetail;\r\n","import axios from \"axios\";\r\nimport { SetNoticeDetail } from \"model/noticeType\";\r\n\r\n// 공지사항 세부사항 get API\r\nconst getNoticeDetail = async (\r\n  setDetail: SetNoticeDetail,\r\n  noticeId: number,\r\n  uri: string\r\n) => {\r\n  try {\r\n    const response = await axios.get(`${uri}${noticeId}`);\r\n    setDetail(response.data);\r\n  } catch (error: unknown) {\r\n    if (axios.isAxiosError(error)) {\r\n      //axios error인지 확인\r\n      // 서버가 응답을 반환했지만 상태 코드가 오류를 나타내는 경우\r\n      console.error(\r\n        \"Axios 오류 발생:\",\r\n        error.response?.status,\r\n        error.response?.statusText\r\n      );\r\n    } else if (error instanceof Error) {\r\n      //js오류인지 확인\r\n      // 요청이 서버로 전송되었지만 응답을 받지 못한 경우\r\n      console.error(\"일반 오류 발생:\", error.message);\r\n    } else {\r\n      console.error(\"알 수 없는 오류 발생:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport default getNoticeDetail;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { HiSpeakerphone } from \"react-icons/hi\";\r\nimport \"styles/css/notice.css\";\r\nimport { transferTime, goBack } from \"components/common/Common\";\r\nimport {delNotice, fetchNotice} from \"apis/notice\";\r\nimport useNoticeDetail from \"hooks/notice/useNoticeDetail\";\r\nimport Loading from \"components/common/Loading\";\r\nimport { renderNewlines } from \"components/common/Common\";\r\n\r\nconst NoticeDetail: React.FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    memberStatus,\r\n    noticeDetail,\r\n    isEditing,\r\n    toggleEditing,\r\n    setDetail,\r\n    uri,\r\n    noticeId,\r\n  } = useNoticeDetail();\r\n\r\n   // noticeDetail이 null인 경우\r\n  if (!noticeDetail) {\r\n    return <Loading/>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"info_body\">\r\n      <div className=\"content_Detail\">\r\n        {/* 제목 */}\r\n        <div className=\"header\">\r\n          <HiSpeakerphone size={30} />\r\n\r\n          {/* 수정 가능 상태에 따라 보여지는 내용 조절 */}\r\n          {isEditing ? (\r\n            <textarea\r\n              className=\"textarea_header\"\r\n              value={noticeDetail.title}\r\n              onChange={(e) =>\r\n                setDetail((prevState) => {\r\n                  if(prevState){\r\n                    return{\r\n                      ...prevState,\r\n                      title: e.target.value,\r\n                    }\r\n                  }\r\n                  return prevState; // prevState가 null인 경우 예외 처리\r\n                })\r\n              }\r\n            />\r\n          ) : (\r\n            <p>{noticeDetail.title}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* 공지사항 정보 */}\r\n        <div className=\"noticeInfo-container\">\r\n          <ul className=\"noticeInfo\">\r\n            {/* 작성자정보 */}\r\n            <li>\r\n              <p className=\"leftInfo\">작성자</p>\r\n              <p>{noticeDetail.writerGen}기 {noticeDetail.writer}</p>\r\n            </li>\r\n            {/* 시간 정보 */}\r\n            <li>\r\n              <p className=\"leftInfo\">생성시간</p>\r\n              <p>{transferTime(noticeDetail.createdTime)}</p>\r\n            </li>\r\n            <li>\r\n              <p className=\"leftInfo\">수정시간</p>\r\n              <p>{transferTime(noticeDetail.updatedTime)}</p>\r\n            </li>\r\n            {/* 조회수정보 */}\r\n            <li>\r\n              <p className=\"leftInfo\">조회수</p>\r\n              <p>{noticeDetail.noticeHit}회</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        {/* 버튼 */}\r\n        <div className=\"btn_back\">\r\n          <button onClick={() => goBack()}>뒤로가기</button>\r\n        </div>\r\n\r\n        {/* 본문 */}\r\n        <div className=\"text_container\">\r\n          {/* 수정 가능 상태에 따라 보여지는 내용 조절 */}\r\n          {isEditing ? (\r\n            <textarea\r\n              className=\"textarea_content\"\r\n              value={noticeDetail.content}\r\n              onChange={(e) =>\r\n                setDetail((prevState) => {\r\n                  if (prevState) {\r\n                    return {\r\n                      ...prevState,\r\n                      content: e.target.value,\r\n                    };\r\n                  }\r\n                  return prevState; // prevState가 null인 경우 예외처리\r\n                })\r\n              }\r\n            />\r\n          ) : (\r\n            <p className=\"text\">{renderNewlines(noticeDetail.content)}</p> // TODO : 내용초과시 break, scroll기능넣기\r\n          )}\r\n        </div>\r\n\r\n        {/* 관리자용버튼_state에 따라 보여지기 */}\r\n        <div\r\n          className={memberStatus === \"관리자\" ? \"btn_container\" : \"no_button\"}\r\n        >\r\n          {/* 수정 중 상태에 따라 버튼 대체 */}\r\n          {isEditing ? (\r\n            <button\r\n              className=\"btn_modify\"\r\n              onClick={() => fetchNotice(uri, noticeId, noticeDetail, navigate)}\r\n            >\r\n              저장하기\r\n            </button>\r\n          ) : (\r\n            <button className=\"btn_submit\" onClick={toggleEditing}>\r\n              수정하기\r\n            </button>\r\n          )}\r\n\r\n          <button\r\n            className=\"btn_delete\"\r\n            onClick={() => delNotice(uri, noticeId, navigate)}\r\n          >\r\n            삭제하기\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default NoticeDetail;\r\n","import axios from \"axios\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport { NoticeDetailType } from \"model/noticeType\";\r\n\r\n// 공지사항 수정 API 요청\r\nconst fetchNotice = async (\r\n  uri: string, noticeId: number , noticeDetail: NoticeDetailType, navigate: NavigateFunction\r\n) => {\r\n  try {\r\n    const response = await axios.patch(`${uri}${noticeId}`, noticeDetail, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      alert(\"공지사항이 성공적으로 수정되었습니다!\");\r\n      navigate(\"/notice\");\r\n    }\r\n  } catch (error: unknown) {\r\n    // axios 에러인 경우\r\n    if (axios.isAxiosError(error)) {\r\n      if (error.response) {\r\n        // 서버 응답이 있는 경우\r\n        if (error.response.status === 403) {\r\n          alert(\"권한이 없습니다\");\r\n        } else if (error.response.status === 404) {\r\n          alert(\"해당 공지사항이 존재하지 않습니다\");\r\n        } else {\r\n          alert(\r\n            `수정 실패: ${error.response.status} ${error.response.statusText}`\r\n          );\r\n        }\r\n      } else if (error.request) {\r\n        // 요청이 이루어졌으나 응답이 없는 경우\r\n        alert(\"수정 실패: 요청이 실패했습니다.\");\r\n      } else {\r\n        // 설정 중 오류 발생\r\n        alert(`수정 실패: ${error.message}`);\r\n      }\r\n    }else { // Axios 에러가 아닌 경우\r\n      alert(`수정 실패: ${String(error)}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport default fetchNotice;\r\n","import axios from \"axios\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\n\r\n// 공지사항 삭제 API 요청\r\nconst delNotice = async (\r\n  uri: string, noticeId: number, navigate: NavigateFunction\r\n) => {\r\n  try {\r\n    const response = await axios.delete(`${uri}${noticeId}`);\r\n\r\n    if (response.status === 200) {\r\n      alert(\"공지사항이 성공적으로 삭제되었습니다!\");\r\n      navigate(\"/notice\");\r\n    }\r\n  } catch (error: unknown) {\r\n\r\n    if (axios.isAxiosError(error)) {  // axios 에러인 경우\r\n      if (error.response) {\r\n        // 서버 응답이 있는 경우\r\n        if (error.response.status === 403) {\r\n          alert(\"권한이 없습니다\");\r\n        } else {\r\n          alert(\r\n            `삭제 실패: ${error.response.status} ${error.response.statusText}`\r\n          );\r\n        }\r\n      } else if (error.request) {\r\n        // 요청이 이루어졌으나 응답이 없는 경우\r\n        alert(\"삭제 실패: 요청이 실패했습니다.\");\r\n      } else {\r\n        // 설정 중 오류 발생\r\n        alert(`삭제 실패: ${error.message}`);\r\n      }\r\n    } else {  // Axios 에러가 아닌 경우\r\n      alert(`삭제 실패: ${String(error)}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport default delNotice;\r\n"],"names":["async","response","axios","status","console","log","setNoticeList","data","error","statusText","Error","message","notice","navigate","headers","alert","request","transferTime","time","replace","goBack","window","history","back","renderNewlines","text","split","map","line","index","_jsxs","React","children","_jsx","renderStyledNewlines","useNoticeDetail","memberStatus","useSelector","state","user","noticeDetail","setDetail","useState","isEditing","setIsEditing","url","URL","location","href","noticeId","parseInt","pathname","uri","useEffect","getNoticeDetail","toggleEditing","prevState","NoticeDetail","useNavigate","className","HiSpeakerphone","size","value","title","onChange","e","target","writerGen","writer","createdTime","updatedTime","noticeHit","onClick","content","String","fetchNotice","delNotice","Loading"],"sourceRoot":""}